;; START Auto-generated production rules for `yaml'
(defconst combobulate-rules-yaml 
 '(("alias" (:*unnamed* ("alias_name"))) 
 ("anchor" (:*unnamed* ("anchor_name"))) 
 ("block_mapping" (:*unnamed* ("block_mapping_pair"))) 
 ("block_mapping_pair" (:key ("block_node" "flow_node") :value ("block_node" "flow_node"))) 
 ("block_node" (:*unnamed* ("tag" "block_mapping" "block_sequence" "block_scalar" "anchor"))) 
 ("block_sequence" (:*unnamed* ("block_sequence_item"))) 
 ("block_sequence_item" (:*unnamed* ("block_node" "flow_node"))) 
 ("document" (:*unnamed* ("yaml_directive" "flow_node" "tag_directive" "reserved_directive" "block_node"))) 
 ("double_quote_scalar" (:*unnamed* ("escape_sequence"))) 
 ("flow_mapping" (:*unnamed* ("flow_pair" "flow_node"))) 
 ("flow_node" (:*unnamed* ("flow_mapping" "tag" "single_quote_scalar" "anchor" "alias" "double_quote_scalar" "plain_scalar" "flow_sequence"))) 
 ("flow_pair" (:key ("flow_node") :value ("flow_node"))) 
 ("flow_sequence" (:*unnamed* ("flow_pair" "flow_node"))) 
 ("plain_scalar" (:*unnamed* ("integer_scalar" "null_scalar" "float_scalar" "boolean_scalar" "string_scalar"))) 
 ("reserved_directive" (:*unnamed* ("directive_parameter" "directive_name"))) 
 ("single_quote_scalar" (:*unnamed* ("escape_sequence"))) 
 ("stream" (:*unnamed* ("document"))) 
 ("tag_directive" (:*unnamed* ("tag_prefix" "tag_handle"))) 
 ("yaml_directive" (:*unnamed* ("yaml_version"))) 
))

(defconst combobulate-rules-yaml-inverted 
 '(("alias_name" ("alias"))
   ("anchor_name" ("anchor"))
   ("block_mapping_pair" ("block_mapping"))
   ("block_node" ("block_sequence_item" "block_mapping_pair" "document"))
   ("flow_node" ("flow_pair" "flow_mapping" "document" "block_sequence_item" "block_mapping_pair" "flow_sequence"))
   ("tag" ("block_node" "flow_node"))
   ("block_mapping" ("block_node"))
   ("block_sequence" ("block_node"))
   ("block_scalar" ("block_node"))
   ("anchor" ("block_node" "flow_node"))
   ("block_sequence_item" ("block_sequence"))
   ("yaml_directive" ("document"))
   ("tag_directive" ("document"))
   ("reserved_directive" ("document"))
   ("escape_sequence" ("double_quote_scalar" "single_quote_scalar"))
   ("flow_pair" ("flow_mapping" "flow_sequence"))
   ("flow_mapping" ("flow_node"))
   ("single_quote_scalar" ("flow_node"))
   ("alias" ("flow_node"))
   ("double_quote_scalar" ("flow_node"))
   ("plain_scalar" ("flow_node"))
   ("flow_sequence" ("flow_node"))
   ("integer_scalar" ("plain_scalar"))
   ("null_scalar" ("plain_scalar"))
   ("float_scalar" ("plain_scalar"))
   ("boolean_scalar" ("plain_scalar"))
   ("string_scalar" ("plain_scalar"))
   ("directive_parameter" ("reserved_directive"))
   ("directive_name" ("reserved_directive"))
   ("document" ("stream"))
   ("tag_prefix" ("tag_directive"))
   ("tag_handle" ("tag_directive"))
   ("yaml_version" ("yaml_directive"))
  ) 
)
;; END production rules for yaml





;; START Auto-generated production rules for `tsx'
(defconst combobulate-rules-tsx 
 '(("_primary_type" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "union_type" "object_type" "existential_type" "literal_type" "tuple_type" "array_type"))) 
 ("declaration" (:*unnamed* ("ambient_declaration" "abstract_class_declaration" "function_signature" "type_alias_declaration" "interface_declaration" "variable_declaration" "enum_declaration" "class_declaration" "internal_module" "import_alias" "module" "lexical_declaration" "function_declaration" "generator_function_declaration"))) 
 ("expression" (:*unnamed* ("assignment_expression" "yield_expression" "update_expression" "as_expression" "primary_expression" "binary_expression" "await_expression" "new_expression" "unary_expression" "augmented_assignment_expression" "internal_module" "ternary_expression" "jsx_self_closing_element" "jsx_element" "satisfies_expression" "glimmer_template" "jsx_fragment"))) 
 ("pattern" (:*unnamed* ("non_null_expression" "undefined" "array_pattern" "rest_pattern" "subscript_expression" "identifier" "member_expression" "object_pattern"))) 
 ("primary_expression" (:*unnamed* ("arrow_function" "import" "non_null_expression" "function" "undefined" "parenthesized_expression" "null" "subscript_expression" "super" "number" "class" "identifier" "this" "member_expression" "template_string" "regex" "false" "call_expression" "generator_function" "object" "string" "true" "meta_property" "array"))) 
 ("statement" (:*unnamed* ("throw_statement" "declaration" "for_in_statement" "with_statement" "do_statement" "for_statement" "return_statement" "switch_statement" "expression_statement" "if_statement" "continue_statement" "export_statement" "statement_block" "debugger_statement" "try_statement" "empty_statement" "break_statement" "labeled_statement" "while_statement" "import_statement"))) 
 ("abstract_class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("abstract_method_signature" (:*unnamed* ("accessibility_modifier") :name ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "type_annotation" "asserts") :type_parameters ("type_parameters"))) 
 ("ambient_declaration" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "declaration" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "property_identifier" "literal_type" "statement_block" "readonly_type" "tuple_type" "array_type"))) 
 ("arguments" (:*unnamed* ("spread_element" "expression"))) 
 ("array" (:*unnamed* ("spread_element" "expression"))) 
 ("array_pattern" (:*unnamed* ("pattern" "assignment_pattern"))) 
 ("array_type" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "union_type" "object_type" "existential_type" "literal_type" "tuple_type" "array_type"))) 
 ("arrow_function" (:body ("statement_block" "expression") :parameter ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "type_annotation" "asserts") :type_parameters ("type_parameters"))) 
 ("as_expression" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "expression" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("asserts" (:*unnamed* ("identifier" "this" "type_predicate"))) 
 ("assignment_expression" (:left ("non_null_expression" "undefined" "parenthesized_expression" "array_pattern" "subscript_expression" "identifier" "member_expression" "object_pattern") :right ("expression"))) 
 ("assignment_pattern" (:left ("pattern") :right ("expression"))) 
 ("augmented_assignment_expression" (:left ("subscript_expression" "non_null_expression" "identifier" "parenthesized_expression" "member_expression") :operator nil :right ("expression"))) 
 ("await_expression" (:*unnamed* ("expression"))) 
 ("binary_expression" (:left ("expression") :operator nil :right ("expression"))) 
 ("break_statement" (:label ("statement_identifier"))) 
 ("call_expression" (:arguments ("template_string" "arguments") :function ("expression") :type_arguments ("type_arguments"))) 
 ("call_signature" (:parameters ("formal_parameters") :return_type ("type_predicate_annotation" "type_annotation" "asserts") :type_parameters ("type_parameters"))) 
 ("catch_clause" (:body ("statement_block") :parameter ("identifier" "object_pattern" "array_pattern") :type ("type_annotation"))) 
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_body" (:*unnamed* ("class_static_block" "index_signature" "method_definition" "abstract_method_signature" "decorator" "method_signature" "public_field_definition"))) 
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_heritage" (:*unnamed* ("implements_clause" "extends_clause"))) 
 ("class_static_block" (:body ("statement_block"))) 
 ("computed_property_name" (:*unnamed* ("expression"))) 
 ("conditional_type" (:alternative ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type") :consequence ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type") :left ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type") :right ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("constraint" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("construct_signature" (:parameters ("formal_parameters") :type ("type_annotation") :type_parameters ("type_parameters"))) 
 ("constructor_type" (:parameters ("formal_parameters") :type ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type") :type_parameters ("type_parameters"))) 
 ("continue_statement" (:label ("statement_identifier"))) 
 ("decorator" (:*unnamed* ("member_expression" "identifier" "call_expression"))) 
 ("default_type" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("do_statement" (:body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("enum_assignment" (:name ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :value ("expression"))) 
 ("enum_body" (:*unnamed* ("enum_assignment") :name ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string"))) 
 ("enum_declaration" (:body ("enum_body") :name ("identifier"))) 
 ("export_clause" (:*unnamed* ("export_specifier"))) 
 ("export_specifier" (:alias ("string" "identifier") :name ("string" "identifier"))) 
 ("export_statement" (:*unnamed* ("export_clause" "expression" "identifier" "namespace_export") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression"))) 
 ("expression_statement" (:*unnamed* ("sequence_expression" "expression"))) 
 ("extends_clause" (:type_arguments ("type_arguments") :value ("expression"))) 
 ("extends_type_clause" (:type ("generic_type" "type_identifier" "nested_type_identifier"))) 
 ("finally_clause" (:body ("statement_block"))) 
 ("flow_maybe_type" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "union_type" "object_type" "existential_type" "literal_type" "tuple_type" "array_type"))) 
 ("for_in_statement" (:body ("statement") :kind nil :left ("non_null_expression" "undefined" "parenthesized_expression" "array_pattern" "subscript_expression" "identifier" "member_expression" "object_pattern") :operator nil :right ("sequence_expression" "expression") :value ("expression"))) 
 ("for_statement" (:body ("statement") :condition ("empty_statement" "expression_statement") :increment ("sequence_expression" "expression") :initializer ("empty_statement" "lexical_declaration" "expression_statement" "variable_declaration"))) 
 ("formal_parameters" (:*unnamed* ("optional_parameter" "required_parameter"))) 
 ("function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "type_annotation" "asserts") :type_parameters ("type_parameters"))) 
 ("function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "type_annotation" "asserts") :type_parameters ("type_parameters"))) 
 ("function_signature" (:name ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "type_annotation" "asserts") :type_parameters ("type_parameters"))) 
 ("function_type" (:parameters ("formal_parameters") :return_type ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "type_predicate" "tuple_type" "array_type") :type_parameters ("type_parameters"))) 
 ("generator_function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "type_annotation" "asserts") :type_parameters ("type_parameters"))) 
 ("generator_function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "type_annotation" "asserts") :type_parameters ("type_parameters"))) 
 ("generic_type" (:name ("type_identifier" "nested_type_identifier") :type_arguments ("type_arguments"))) 
 ("glimmer_template" (:close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag"))) 
 ("if_statement" (:alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("implements_clause" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("import_alias" (:*unnamed* ("identifier" "nested_identifier"))) 
 ("import_clause" (:*unnamed* ("namespace_import" "identifier" "named_imports"))) 
 ("import_require_clause" (:*unnamed* ("identifier") :source ("string"))) 
 ("import_specifier" (:alias ("identifier") :name ("string" "identifier"))) 
 ("import_statement" (:*unnamed* ("import_clause" "import_require_clause") :source ("string"))) 
 ("index_signature" (:*unnamed* ("mapped_type_clause") :index_type ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type") :name ("identifier") :sign nil :type ("opting_type_annotation" "omitting_type_annotation" "type_annotation"))) 
 ("index_type_query" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "union_type" "object_type" "existential_type" "literal_type" "tuple_type" "array_type"))) 
 ("infer_type" (:*unnamed* ("type_identifier"))) 
 ("interface_declaration" (:*unnamed* ("extends_type_clause") :body ("object_type") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("internal_module" (:body ("statement_block") :name ("string" "identifier" "nested_identifier"))) 
 ("intersection_type" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("jsx_attribute" (:*unnamed* ("jsx_expression" "jsx_namespace_name" "jsx_element" "property_identifier" "jsx_fragment" "string" "jsx_self_closing_element"))) 
 ("jsx_closing_element" (:name ("jsx_namespace_name" "identifier" "nested_identifier"))) 
 ("jsx_element" (:*unnamed* ("jsx_expression" "jsx_element" "jsx_text" "jsx_fragment" "jsx_self_closing_element") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element"))) 
 ("jsx_expression" (:*unnamed* ("sequence_expression" "expression" "spread_element"))) 
 ("jsx_fragment" (:*unnamed* ("jsx_expression" "jsx_element" "jsx_text" "jsx_fragment" "jsx_self_closing_element"))) 
 ("jsx_namespace_name" (:*unnamed* ("identifier"))) 
 ("jsx_opening_element" (:attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "nested_identifier") :type_arguments ("type_arguments"))) 
 ("jsx_self_closing_element" (:attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "nested_identifier") :type_arguments ("type_arguments"))) 
 ("labeled_statement" (:body ("statement") :label ("statement_identifier"))) 
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil)) 
 ("literal_type" (:*unnamed* ("true" "unary_expression" "false" "number" "undefined" "null" "string"))) 
 ("lookup_type" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("mapped_type_clause" (:alias ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type") :name ("type_identifier") :type ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("member_expression" (:object ("expression") :optional_chain ("optional_chain") :property ("private_property_identifier" "property_identifier"))) 
 ("method_definition" (:*unnamed* ("override_modifier" "accessibility_modifier") :body ("statement_block") :name ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "type_annotation" "asserts") :type_parameters ("type_parameters"))) 
 ("method_signature" (:*unnamed* ("override_modifier" "accessibility_modifier") :name ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :parameters ("formal_parameters") :return_type ("type_predicate_annotation" "type_annotation" "asserts") :type_parameters ("type_parameters"))) 
 ("module" (:body ("statement_block") :name ("string" "identifier" "nested_identifier"))) 
 ("named_imports" (:*unnamed* ("import_specifier"))) 
 ("namespace_export" (:*unnamed* ("string" "identifier"))) 
 ("namespace_import" (:*unnamed* ("identifier"))) 
 ("nested_identifier" (:*unnamed* ("identifier" "nested_identifier"))) 
 ("nested_type_identifier" (:module ("identifier" "nested_identifier") :name ("type_identifier"))) 
 ("new_expression" (:arguments ("arguments") :constructor ("primary_expression") :type_arguments ("type_arguments"))) 
 ("non_null_expression" (:*unnamed* ("expression"))) 
 ("object" (:*unnamed* ("pair" "spread_element" "shorthand_property_identifier" "method_definition"))) 
 ("object_assignment_pattern" (:left ("shorthand_property_identifier_pattern" "object_pattern" "array_pattern") :right ("expression"))) 
 ("object_pattern" (:*unnamed* ("rest_pattern" "shorthand_property_identifier_pattern" "pair_pattern" "object_assignment_pattern"))) 
 ("object_type" (:*unnamed* ("property_signature" "export_statement" "index_signature" "construct_signature" "call_signature" "method_signature"))) 
 ("omitting_type_annotation" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("opting_type_annotation" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("optional_parameter" (:*unnamed* ("override_modifier" "accessibility_modifier") :decorator ("decorator") :name ("identifier") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("optional_type" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("pair" (:key ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :value ("expression"))) 
 ("pair_pattern" (:key ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :value ("pattern" "assignment_pattern"))) 
 ("parenthesized_expression" (:*unnamed* ("sequence_expression" "expression") :type ("type_annotation"))) 
 ("parenthesized_type" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("program" (:*unnamed* ("statement" "hash_bang_line"))) 
 ("property_signature" (:*unnamed* ("override_modifier" "accessibility_modifier") :name ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :type ("type_annotation"))) 
 ("public_field_definition" (:*unnamed* ("override_modifier" "accessibility_modifier") :name ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :type ("type_annotation") :value ("expression"))) 
 ("readonly_type" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("regex" (:flags ("regex_flags") :pattern ("regex_pattern"))) 
 ("required_parameter" (:*unnamed* ("override_modifier" "accessibility_modifier") :decorator ("decorator") :name ("rest_pattern" "identifier") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("rest_pattern" (:*unnamed* ("subscript_expression" "non_null_expression" "identifier" "undefined" "member_expression" "object_pattern" "array_pattern"))) 
 ("rest_type" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("return_statement" (:*unnamed* ("sequence_expression" "expression"))) 
 ("satisfies_expression" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "expression" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("sequence_expression" (:left ("expression") :right ("sequence_expression" "expression"))) 
 ("spread_element" (:*unnamed* ("expression"))) 
 ("statement_block" (:*unnamed* ("statement"))) 
 ("string" (:*unnamed* ("escape_sequence" "string_fragment"))) 
 ("subscript_expression" (:index ("expression" "number" "predefined_type" "sequence_expression" "string") :object ("expression") :optional_chain ("optional_chain"))) 
 ("switch_body" (:*unnamed* ("switch_default" "switch_case"))) 
 ("switch_case" (:body ("statement") :value ("sequence_expression" "expression"))) 
 ("switch_default" (:body ("statement"))) 
 ("switch_statement" (:body ("switch_body") :value ("parenthesized_expression"))) 
 ("template_literal_type" (:*unnamed* ("template_type"))) 
 ("template_string" (:*unnamed* ("escape_sequence" "template_substitution"))) 
 ("template_substitution" (:*unnamed* ("sequence_expression" "expression"))) 
 ("template_type" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "union_type" "object_type" "existential_type" "literal_type" "tuple_type" "array_type"))) 
 ("ternary_expression" (:alternative ("expression") :condition ("expression") :consequence ("expression"))) 
 ("throw_statement" (:*unnamed* ("sequence_expression" "expression"))) 
 ("try_statement" (:body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause"))) 
 ("tuple_type" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "optional_parameter" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "rest_type" "required_parameter" "tuple_type" "optional_type" "array_type"))) 
 ("type_alias_declaration" (:name ("type_identifier") :type_parameters ("type_parameters") :value ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("type_annotation" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("type_arguments" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("type_parameter" (:constraint ("constraint") :name ("type_identifier") :value ("default_type"))) 
 ("type_parameters" (:*unnamed* ("type_parameter"))) 
 ("type_predicate" (:name ("identifier" "this") :type ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("type_predicate_annotation" (:*unnamed* ("type_predicate"))) 
 ("type_query" (:*unnamed* ("subscript_expression" "member_expression" "identifier" "call_expression"))) 
 ("unary_expression" (:argument ("number" "expression") :operator nil)) 
 ("union_type" (:*unnamed* ("generic_type" "type_identifier" "index_type_query" "nested_type_identifier" "parenthesized_type" "flow_maybe_type" "type_query" "infer_type" "constructor_type" "intersection_type" "lookup_type" "predefined_type" "conditional_type" "template_literal_type" "this_type" "function_type" "union_type" "object_type" "existential_type" "literal_type" "readonly_type" "tuple_type" "array_type"))) 
 ("update_expression" (:argument ("expression") :operator nil)) 
 ("variable_declaration" (:*unnamed* ("variable_declarator"))) 
 ("variable_declarator" (:name ("identifier" "object_pattern" "array_pattern") :type ("type_annotation") :value ("expression"))) 
 ("while_statement" (:body ("statement") :condition ("parenthesized_expression"))) 
 ("with_statement" (:body ("statement") :object ("parenthesized_expression"))) 
 ("yield_expression" (:*unnamed* ("expression"))) 
))

(defconst combobulate-rules-tsx-inverted 
 '(("generic_type" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "extends_type_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("type_identifier" ("index_type_query" "parenthesized_type" "infer_type" "constraint" "index_signature" "conditional_type" "abstract_class_declaration" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "extends_type_clause" "array_type" "ambient_declaration" "generic_type" "type_arguments" "nested_type_identifier" "flow_maybe_type" "template_type" "opting_type_annotation" "class_declaration" "type_parameter" "constructor_type" "class" "intersection_type" "function_type" "as_expression" "lookup_type" "omitting_type_annotation" "union_type" "type_alias_declaration" "interface_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("index_type_query" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("nested_type_identifier" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "extends_type_clause" "array_type" "ambient_declaration" "generic_type" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("parenthesized_type" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("flow_maybe_type" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("type_query" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("intersection_type" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("lookup_type" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("predefined_type" ("index_type_query" "parenthesized_type" "subscript_expression" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("conditional_type" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("template_literal_type" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("this_type" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("union_type" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("object_type" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "interface_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("existential_type" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("literal_type" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("tuple_type" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("array_type" ("index_type_query" "parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "array_type" "ambient_declaration" "type_arguments" "flow_maybe_type" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "_primary_type" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("ambient_declaration" ("declaration"))
   ("abstract_class_declaration" ("declaration"))
   ("function_signature" ("declaration"))
   ("type_alias_declaration" ("declaration"))
   ("interface_declaration" ("declaration"))
   ("variable_declaration" ("for_statement" "declaration"))
   ("enum_declaration" ("declaration"))
   ("class_declaration" ("declaration"))
   ("internal_module" ("expression" "declaration"))
   ("import_alias" ("declaration"))
   ("module" ("declaration"))
   ("lexical_declaration" ("for_statement" "declaration"))
   ("function_declaration" ("declaration"))
   ("generator_function_declaration" ("declaration"))
   ("assignment_expression" ("expression"))
   ("yield_expression" ("expression"))
   ("update_expression" ("expression"))
   ("as_expression" ("expression"))
   ("primary_expression" ("expression" "new_expression"))
   ("binary_expression" ("expression"))
   ("await_expression" ("expression"))
   ("new_expression" ("expression"))
   ("unary_expression" ("literal_type" "expression"))
   ("augmented_assignment_expression" ("expression"))
   ("ternary_expression" ("expression"))
   ("jsx_self_closing_element" ("expression" "jsx_element" "jsx_fragment" "jsx_attribute"))
   ("jsx_element" ("expression" "jsx_element" "jsx_fragment" "jsx_attribute"))
   ("satisfies_expression" ("expression"))
   ("glimmer_template" ("expression"))
   ("jsx_fragment" ("expression" "jsx_element" "jsx_fragment" "jsx_attribute"))
   ("non_null_expression" ("assignment_expression" "augmented_assignment_expression" "rest_pattern" "pattern" "for_in_statement" "primary_expression"))
   ("undefined" ("assignment_expression" "literal_type" "rest_pattern" "pattern" "for_in_statement" "primary_expression"))
   ("array_pattern" ("assignment_expression" "variable_declarator" "object_assignment_pattern" "rest_pattern" "pattern" "for_in_statement" "catch_clause"))
   ("rest_pattern" ("pattern" "object_pattern" "required_parameter"))
   ("subscript_expression" ("assignment_expression" "augmented_assignment_expression" "type_query" "rest_pattern" "pattern" "for_in_statement" "primary_expression"))
   ("identifier" ("arrow_function" "assignment_expression" "jsx_opening_element" "enum_declaration" "optional_parameter" "type_query" "rest_pattern" "pattern" "for_in_statement" "index_signature" "import_alias" "primary_expression" "export_specifier" "decorator" "generator_function_declaration" "jsx_namespace_name" "jsx_closing_element" "internal_module" "type_predicate" "module" "required_parameter" "function_declaration" "function" "nested_type_identifier" "variable_declarator" "nested_identifier" "import_require_clause" "namespace_import" "catch_clause" "asserts" "export_statement" "function_signature" "augmented_assignment_expression" "generator_function" "jsx_self_closing_element" "import_clause" "namespace_export" "import_specifier"))
   ("member_expression" ("assignment_expression" "augmented_assignment_expression" "type_query" "rest_pattern" "pattern" "for_in_statement" "primary_expression" "decorator"))
   ("object_pattern" ("assignment_expression" "variable_declarator" "object_assignment_pattern" "rest_pattern" "pattern" "for_in_statement" "catch_clause"))
   ("arrow_function" ("primary_expression"))
   ("import" ("primary_expression"))
   ("function" ("primary_expression"))
   ("parenthesized_expression" ("assignment_expression" "if_statement" "switch_statement" "augmented_assignment_expression" "for_in_statement" "with_statement" "primary_expression" "while_statement" "do_statement"))
   ("null" ("literal_type" "primary_expression"))
   ("super" ("primary_expression"))
   ("number" ("pair" "unary_expression" "enum_body" "abstract_method_signature" "literal_type" "public_field_definition" "subscript_expression" "property_signature" "enum_assignment" "primary_expression" "method_definition" "method_signature" "pair_pattern"))
   ("class" ("primary_expression"))
   ("this" ("type_predicate" "optional_parameter" "primary_expression" "required_parameter" "asserts"))
   ("template_string" ("primary_expression" "call_expression"))
   ("regex" ("primary_expression"))
   ("false" ("literal_type" "primary_expression"))
   ("call_expression" ("decorator" "primary_expression" "type_query"))
   ("generator_function" ("primary_expression"))
   ("object" ("primary_expression"))
   ("string" ("pair" "enum_body" "subscript_expression" "export_specifier" "primary_expression" "pair_pattern" "jsx_attribute" "internal_module" "public_field_definition" "property_signature" "enum_assignment" "method_definition" "module" "import_require_clause" "import_statement" "export_statement" "abstract_method_signature" "literal_type" "namespace_export" "import_specifier" "method_signature"))
   ("true" ("literal_type" "primary_expression"))
   ("meta_property" ("primary_expression"))
   ("array" ("primary_expression"))
   ("throw_statement" ("statement"))
   ("declaration" ("statement" "ambient_declaration" "export_statement"))
   ("for_in_statement" ("statement"))
   ("with_statement" ("statement"))
   ("do_statement" ("statement"))
   ("for_statement" ("statement"))
   ("return_statement" ("statement"))
   ("switch_statement" ("statement"))
   ("expression_statement" ("statement" "for_statement"))
   ("if_statement" ("statement"))
   ("continue_statement" ("statement"))
   ("export_statement" ("statement" "object_type"))
   ("statement_block" ("arrow_function" "ambient_declaration" "function" "generator_function" "internal_module" "try_statement" "generator_function_declaration" "class_static_block" "finally_clause" "module" "method_definition" "statement" "function_declaration" "catch_clause"))
   ("debugger_statement" ("statement"))
   ("try_statement" ("statement"))
   ("empty_statement" ("statement" "for_statement"))
   ("break_statement" ("statement"))
   ("labeled_statement" ("statement"))
   ("while_statement" ("statement"))
   ("import_statement" ("statement"))
   ("class_heritage" ("abstract_class_declaration" "class" "class_declaration"))
   ("class_body" ("abstract_class_declaration" "class" "class_declaration"))
   ("decorator" ("abstract_class_declaration" "export_statement" "class_declaration" "optional_parameter" "class" "class_body" "required_parameter"))
   ("type_parameters" ("arrow_function" "type_alias_declaration" "abstract_class_declaration" "function" "function_signature" "construct_signature" "abstract_method_signature" "generator_function" "interface_declaration" "call_signature" "class_declaration" "constructor_type" "class" "function_type" "method_definition" "function_declaration" "method_signature" "generator_function_declaration"))
   ("accessibility_modifier" ("abstract_method_signature" "optional_parameter" "public_field_definition" "property_signature" "method_definition" "required_parameter" "method_signature"))
   ("computed_property_name" ("pair" "enum_body" "abstract_method_signature" "public_field_definition" "property_signature" "enum_assignment" "method_definition" "method_signature" "pair_pattern"))
   ("private_property_identifier" ("pair" "enum_body" "abstract_method_signature" "public_field_definition" "property_signature" "enum_assignment" "method_definition" "member_expression" "method_signature" "pair_pattern"))
   ("property_identifier" ("pair" "ambient_declaration" "jsx_attribute" "enum_body" "abstract_method_signature" "public_field_definition" "property_signature" "enum_assignment" "method_definition" "member_expression" "method_signature" "pair_pattern"))
   ("formal_parameters" ("arrow_function" "function" "function_signature" "construct_signature" "abstract_method_signature" "generator_function" "call_signature" "constructor_type" "function_type" "method_definition" "function_declaration" "method_signature" "generator_function_declaration"))
   ("type_predicate_annotation" ("arrow_function" "function" "function_signature" "abstract_method_signature" "generator_function" "call_signature" "method_definition" "function_declaration" "method_signature" "generator_function_declaration"))
   ("type_annotation" ("arrow_function" "parenthesized_expression" "optional_parameter" "index_signature" "generator_function_declaration" "call_signature" "public_field_definition" "property_signature" "method_definition" "required_parameter" "function_declaration" "function" "variable_declarator" "construct_signature" "catch_clause" "function_signature" "abstract_method_signature" "generator_function" "method_signature"))
   ("asserts" ("arrow_function" "function" "function_signature" "abstract_method_signature" "generator_function" "call_signature" "method_definition" "function_declaration" "method_signature" "generator_function_declaration"))
   ("infer_type" ("parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "ambient_declaration" "type_arguments" "template_type" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("constructor_type" ("parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "ambient_declaration" "type_arguments" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("function_type" ("parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "ambient_declaration" "type_arguments" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("readonly_type" ("parenthesized_type" "constraint" "index_signature" "conditional_type" "mapped_type_clause" "default_type" "type_predicate" "rest_type" "satisfies_expression" "implements_clause" "ambient_declaration" "type_arguments" "opting_type_annotation" "constructor_type" "intersection_type" "lookup_type" "function_type" "as_expression" "omitting_type_annotation" "union_type" "type_alias_declaration" "readonly_type" "tuple_type" "optional_type" "type_annotation"))
   ("spread_element" ("object" "jsx_expression" "arguments" "array"))
   ("expression" ("arrow_function" "assignment_expression" "pair" "jsx_expression" "non_null_expression" "parenthesized_expression" "yield_expression" "optional_parameter" "subscript_expression" "for_in_statement" "assignment_pattern" "member_expression" "binary_expression" "template_substitution" "return_statement" "await_expression" "expression_statement" "unary_expression" "extends_clause" "ternary_expression" "public_field_definition" "enum_assignment" "satisfies_expression" "required_parameter" "sequence_expression" "throw_statement" "variable_declarator" "object_assignment_pattern" "update_expression" "as_expression" "for_statement" "switch_case" "computed_property_name" "export_statement" "augmented_assignment_expression" "call_expression" "spread_element" "arguments" "array"))
   ("pattern" ("optional_parameter" "array_pattern" "assignment_pattern" "required_parameter" "pair_pattern"))
   ("assignment_pattern" ("pair_pattern" "array_pattern"))
   ("type_predicate" ("type_predicate_annotation" "function_type" "asserts"))
   ("statement_identifier" ("labeled_statement" "continue_statement" "break_statement"))
   ("arguments" ("new_expression" "call_expression"))
   ("type_arguments" ("generic_type" "new_expression" "extends_clause" "call_expression" "jsx_opening_element" "jsx_self_closing_element"))
   ("class_static_block" ("class_body"))
   ("index_signature" ("object_type" "class_body"))
   ("method_definition" ("object" "class_body"))
   ("abstract_method_signature" ("class_body"))
   ("method_signature" ("object_type" "class_body"))
   ("public_field_definition" ("class_body"))
   ("implements_clause" ("class_heritage"))
   ("extends_clause" ("class_heritage"))
   ("statement" ("if_statement" "statement_block" "else_clause" "switch_default" "for_in_statement" "with_statement" "labeled_statement" "while_statement" "program" "do_statement" "for_statement" "switch_case"))
   ("enum_assignment" ("enum_body"))
   ("enum_body" ("enum_declaration"))
   ("export_specifier" ("export_clause"))
   ("export_clause" ("export_statement"))
   ("namespace_export" ("export_statement"))
   ("sequence_expression" ("return_statement" "throw_statement" "expression_statement" "jsx_expression" "parenthesized_expression" "subscript_expression" "for_in_statement" "sequence_expression" "template_substitution" "for_statement" "switch_case"))
   ("optional_parameter" ("tuple_type" "formal_parameters"))
   ("required_parameter" ("tuple_type" "formal_parameters"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("else_clause" ("if_statement"))
   ("nested_identifier" ("nested_type_identifier" "jsx_closing_element" "nested_identifier" "jsx_opening_element" "internal_module" "jsx_self_closing_element" "import_alias" "module"))
   ("namespace_import" ("import_clause"))
   ("named_imports" ("import_clause"))
   ("import_clause" ("import_statement"))
   ("import_require_clause" ("import_statement"))
   ("mapped_type_clause" ("index_signature"))
   ("opting_type_annotation" ("index_signature"))
   ("omitting_type_annotation" ("index_signature"))
   ("extends_type_clause" ("interface_declaration"))
   ("jsx_expression" ("jsx_attribute" "jsx_opening_element" "jsx_self_closing_element" "jsx_element" "jsx_fragment"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_closing_element" "jsx_attribute" "jsx_self_closing_element"))
   ("jsx_text" ("jsx_fragment" "jsx_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("optional_chain" ("subscript_expression" "member_expression"))
   ("override_modifier" ("optional_parameter" "public_field_definition" "property_signature" "method_definition" "required_parameter" "method_signature"))
   ("import_specifier" ("named_imports"))
   ("pair" ("object"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_pattern" "object_assignment_pattern"))
   ("pair_pattern" ("object_pattern"))
   ("object_assignment_pattern" ("object_pattern"))
   ("property_signature" ("object_type"))
   ("construct_signature" ("object_type"))
   ("call_signature" ("object_type"))
   ("hash_bang_line" ("program"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("escape_sequence" ("template_string" "string"))
   ("string_fragment" ("string"))
   ("switch_default" ("switch_body"))
   ("switch_case" ("switch_body"))
   ("switch_body" ("switch_statement"))
   ("template_type" ("template_literal_type"))
   ("template_substitution" ("template_string"))
   ("finally_clause" ("try_statement"))
   ("catch_clause" ("try_statement"))
   ("rest_type" ("tuple_type"))
   ("optional_type" ("tuple_type"))
   ("constraint" ("type_parameter"))
   ("default_type" ("type_parameter"))
   ("type_parameter" ("type_parameters"))
  ) 
)
;; END production rules for tsx





;; START Auto-generated production rules for `css'
(defconst combobulate-rules-css 
 '(("adjacent_sibling_selector" (:*unnamed* ("nesting_selector" "string_value" "pseudo_element_selector" "attribute_selector" "class_selector" "universal_selector" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "tag_name" "child_selector" "descendant_selector"))) 
 ("arguments" (:*unnamed* ("nesting_selector" "plain_value" "string_value" "class_selector" "integer_value" "sibling_selector" "id_selector" "color_value" "float_value" "binary_expression" "child_selector" "pseudo_element_selector" "call_expression" "universal_selector" "adjacent_sibling_selector" "descendant_selector" "parenthesized_value" "pseudo_class_selector" "attribute_selector" "tag_name"))) 
 ("at_rule" (:*unnamed* ("parenthesized_query" "selector_query" "keyword_query" "unary_query" "binary_query" "block" "feature_query" "at_keyword"))) 
 ("attribute_selector" (:*unnamed* ("nesting_selector" "plain_value" "string_value" "attribute_name" "class_selector" "integer_value" "sibling_selector" "id_selector" "color_value" "float_value" "binary_expression" "child_selector" "pseudo_element_selector" "call_expression" "universal_selector" "adjacent_sibling_selector" "parenthesized_value" "pseudo_class_selector" "tag_name" "attribute_selector" "descendant_selector"))) 
 ("binary_expression" (:*unnamed* ("plain_value" "string_value" "call_expression" "integer_value" "parenthesized_value" "color_value" "float_value" "binary_expression"))) 
 ("binary_query" (:*unnamed* ("binary_query" "selector_query" "parenthesized_query" "keyword_query" "unary_query" "feature_query"))) 
 ("block" (:*unnamed* ("supports_statement" "charset_statement" "rule_set" "declaration" "at_rule" "namespace_statement" "keyframes_statement" "media_statement" "import_statement"))) 
 ("call_expression" (:*unnamed* ("function_name" "arguments"))) 
 ("charset_statement" (:*unnamed* ("plain_value" "string_value" "call_expression" "integer_value" "parenthesized_value" "color_value" "float_value" "binary_expression"))) 
 ("child_selector" (:*unnamed* ("nesting_selector" "string_value" "pseudo_element_selector" "attribute_selector" "class_selector" "universal_selector" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "tag_name" "child_selector" "descendant_selector"))) 
 ("class_selector" (:*unnamed* ("nesting_selector" "string_value" "pseudo_element_selector" "attribute_selector" "class_selector" "universal_selector" "adjacent_sibling_selector" "class_name" "sibling_selector" "id_selector" "pseudo_class_selector" "tag_name" "child_selector" "descendant_selector"))) 
 ("declaration" (:*unnamed* ("plain_value" "string_value" "important" "call_expression" "integer_value" "parenthesized_value" "color_value" "property_name" "float_value" "binary_expression"))) 
 ("descendant_selector" (:*unnamed* ("nesting_selector" "string_value" "pseudo_element_selector" "attribute_selector" "class_selector" "universal_selector" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "tag_name" "child_selector" "descendant_selector"))) 
 ("feature_query" (:*unnamed* ("plain_value" "string_value" "call_expression" "integer_value" "parenthesized_value" "color_value" "float_value" "binary_expression" "feature_name"))) 
 ("float_value" (:*unnamed* ("unit"))) 
 ("id_selector" (:*unnamed* ("nesting_selector" "string_value" "id_name" "pseudo_element_selector" "attribute_selector" "class_selector" "universal_selector" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "tag_name" "child_selector" "descendant_selector"))) 
 ("import_statement" (:*unnamed* ("plain_value" "string_value" "call_expression" "parenthesized_query" "keyword_query" "selector_query" "integer_value" "unary_query" "parenthesized_value" "binary_query" "color_value" "feature_query" "binary_expression" "float_value"))) 
 ("integer_value" (:*unnamed* ("unit"))) 
 ("keyframe_block" (:*unnamed* ("integer_value" "to" "block" "from"))) 
 ("keyframe_block_list" (:*unnamed* ("keyframe_block"))) 
 ("keyframes_statement" (:*unnamed* ("keyframe_block_list" "keyframes_name" "at_keyword"))) 
 ("media_statement" (:*unnamed* ("binary_query" "block" "parenthesized_query" "selector_query" "keyword_query" "unary_query" "feature_query"))) 
 ("namespace_statement" (:*unnamed* ("string_value" "namespace_name" "call_expression"))) 
 ("parenthesized_query" (:*unnamed* ("binary_query" "selector_query" "parenthesized_query" "keyword_query" "unary_query" "feature_query"))) 
 ("parenthesized_value" (:*unnamed* ("plain_value" "string_value" "call_expression" "integer_value" "parenthesized_value" "color_value" "float_value" "binary_expression"))) 
 ("pseudo_class_selector" (:*unnamed* ("nesting_selector" "tag_name" "string_value" "pseudo_element_selector" "attribute_selector" "class_selector" "universal_selector" "adjacent_sibling_selector" "class_name" "sibling_selector" "id_selector" "pseudo_class_selector" "arguments" "child_selector" "descendant_selector"))) 
 ("pseudo_element_selector" (:*unnamed* ("nesting_selector" "string_value" "pseudo_element_selector" "attribute_selector" "class_selector" "universal_selector" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "tag_name" "child_selector" "descendant_selector"))) 
 ("rule_set" (:*unnamed* ("selectors" "block"))) 
 ("selector_query" (:*unnamed* ("nesting_selector" "string_value" "pseudo_element_selector" "attribute_selector" "class_selector" "universal_selector" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "tag_name" "child_selector" "descendant_selector"))) 
 ("selectors" (:*unnamed* ("nesting_selector" "string_value" "pseudo_element_selector" "attribute_selector" "class_selector" "universal_selector" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "tag_name" "child_selector" "descendant_selector"))) 
 ("sibling_selector" (:*unnamed* ("nesting_selector" "string_value" "pseudo_element_selector" "attribute_selector" "class_selector" "universal_selector" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "tag_name" "child_selector" "descendant_selector"))) 
 ("stylesheet" (:*unnamed* ("supports_statement" "charset_statement" "rule_set" "declaration" "at_rule" "namespace_statement" "keyframes_statement" "media_statement" "import_statement"))) 
 ("supports_statement" (:*unnamed* ("binary_query" "block" "parenthesized_query" "selector_query" "keyword_query" "unary_query" "feature_query"))) 
 ("unary_query" (:*unnamed* ("binary_query" "selector_query" "parenthesized_query" "keyword_query" "unary_query" "feature_query"))) 
))

(defconst combobulate-rules-css-inverted 
 '(("nesting_selector" ("pseudo_element_selector" "selector_query" "attribute_selector" "class_selector" "selectors" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "arguments" "child_selector" "descendant_selector"))
   ("string_value" ("declaration" "id_selector" "binary_expression" "arguments" "pseudo_element_selector" "selectors" "adjacent_sibling_selector" "parenthesized_value" "namespace_statement" "feature_query" "attribute_selector" "descendant_selector" "class_selector" "sibling_selector" "child_selector" "charset_statement" "selector_query" "pseudo_class_selector" "import_statement"))
   ("pseudo_element_selector" ("pseudo_element_selector" "selector_query" "attribute_selector" "class_selector" "selectors" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "arguments" "child_selector" "descendant_selector"))
   ("attribute_selector" ("pseudo_element_selector" "selector_query" "attribute_selector" "class_selector" "selectors" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "arguments" "child_selector" "descendant_selector"))
   ("class_selector" ("pseudo_element_selector" "selector_query" "attribute_selector" "class_selector" "selectors" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "arguments" "child_selector" "descendant_selector"))
   ("universal_selector" ("pseudo_element_selector" "selector_query" "attribute_selector" "class_selector" "selectors" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "arguments" "child_selector" "descendant_selector"))
   ("adjacent_sibling_selector" ("pseudo_element_selector" "selector_query" "attribute_selector" "class_selector" "selectors" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "arguments" "child_selector" "descendant_selector"))
   ("sibling_selector" ("pseudo_element_selector" "selector_query" "attribute_selector" "class_selector" "selectors" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "arguments" "child_selector" "descendant_selector"))
   ("id_selector" ("pseudo_element_selector" "selector_query" "attribute_selector" "class_selector" "selectors" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "arguments" "child_selector" "descendant_selector"))
   ("pseudo_class_selector" ("pseudo_element_selector" "selector_query" "attribute_selector" "class_selector" "selectors" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "arguments" "child_selector" "descendant_selector"))
   ("tag_name" ("pseudo_element_selector" "selector_query" "attribute_selector" "class_selector" "selectors" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "arguments" "child_selector" "descendant_selector"))
   ("child_selector" ("pseudo_element_selector" "selector_query" "attribute_selector" "class_selector" "selectors" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "arguments" "child_selector" "descendant_selector"))
   ("descendant_selector" ("pseudo_element_selector" "selector_query" "attribute_selector" "class_selector" "selectors" "adjacent_sibling_selector" "sibling_selector" "id_selector" "pseudo_class_selector" "arguments" "child_selector" "descendant_selector"))
   ("plain_value" ("import_statement" "charset_statement" "declaration" "parenthesized_value" "feature_query" "binary_expression" "arguments" "attribute_selector"))
   ("integer_value" ("import_statement" "charset_statement" "keyframe_block" "declaration" "parenthesized_value" "feature_query" "binary_expression" "arguments" "attribute_selector"))
   ("color_value" ("import_statement" "charset_statement" "declaration" "parenthesized_value" "feature_query" "binary_expression" "arguments" "attribute_selector"))
   ("float_value" ("import_statement" "charset_statement" "declaration" "parenthesized_value" "feature_query" "binary_expression" "arguments" "attribute_selector"))
   ("binary_expression" ("import_statement" "charset_statement" "declaration" "parenthesized_value" "feature_query" "binary_expression" "arguments" "attribute_selector"))
   ("call_expression" ("import_statement" "charset_statement" "declaration" "parenthesized_value" "namespace_statement" "feature_query" "binary_expression" "arguments" "attribute_selector"))
   ("parenthesized_value" ("import_statement" "charset_statement" "declaration" "parenthesized_value" "feature_query" "binary_expression" "arguments" "attribute_selector"))
   ("parenthesized_query" ("supports_statement" "parenthesized_query" "unary_query" "at_rule" "binary_query" "media_statement" "import_statement"))
   ("selector_query" ("supports_statement" "parenthesized_query" "unary_query" "at_rule" "binary_query" "media_statement" "import_statement"))
   ("keyword_query" ("supports_statement" "parenthesized_query" "unary_query" "at_rule" "binary_query" "media_statement" "import_statement"))
   ("unary_query" ("supports_statement" "parenthesized_query" "unary_query" "at_rule" "binary_query" "media_statement" "import_statement"))
   ("binary_query" ("supports_statement" "parenthesized_query" "unary_query" "at_rule" "binary_query" "media_statement" "import_statement"))
   ("block" ("supports_statement" "rule_set" "keyframe_block" "media_statement" "at_rule"))
   ("feature_query" ("supports_statement" "parenthesized_query" "unary_query" "at_rule" "binary_query" "media_statement" "import_statement"))
   ("at_keyword" ("keyframes_statement" "at_rule"))
   ("attribute_name" ("attribute_selector"))
   ("supports_statement" ("stylesheet" "block"))
   ("charset_statement" ("stylesheet" "block"))
   ("rule_set" ("stylesheet" "block"))
   ("declaration" ("stylesheet" "block"))
   ("at_rule" ("stylesheet" "block"))
   ("namespace_statement" ("stylesheet" "block"))
   ("keyframes_statement" ("stylesheet" "block"))
   ("media_statement" ("stylesheet" "block"))
   ("import_statement" ("stylesheet" "block"))
   ("function_name" ("call_expression"))
   ("arguments" ("pseudo_class_selector" "call_expression"))
   ("class_name" ("class_selector" "pseudo_class_selector"))
   ("important" ("declaration"))
   ("property_name" ("declaration"))
   ("feature_name" ("feature_query"))
   ("unit" ("float_value" "integer_value"))
   ("id_name" ("id_selector"))
   ("to" ("keyframe_block"))
   ("from" ("keyframe_block"))
   ("keyframe_block" ("keyframe_block_list"))
   ("keyframe_block_list" ("keyframes_statement"))
   ("keyframes_name" ("keyframes_statement"))
   ("namespace_name" ("namespace_statement"))
   ("selectors" ("rule_set"))
  ) 
)
;; END production rules for css





;; START Auto-generated production rules for `javascript'
(defconst combobulate-rules-javascript 
 '(("declaration" (:*unnamed* ("lexical_declaration" "function_declaration" "variable_declaration" "class_declaration" "generator_function_declaration"))) 
 ("expression" (:*unnamed* ("assignment_expression" "await_expression" "new_expression" "unary_expression" "augmented_assignment_expression" "yield_expression" "ternary_expression" "jsx_self_closing_element" "update_expression" "jsx_element" "glimmer_template" "primary_expression" "binary_expression" "jsx_fragment"))) 
 ("pattern" (:*unnamed* ("rest_pattern" "subscript_expression" "identifier" "undefined" "member_expression" "object_pattern" "array_pattern"))) 
 ("primary_expression" (:*unnamed* ("arrow_function" "import" "function" "undefined" "parenthesized_expression" "null" "subscript_expression" "super" "number" "class" "identifier" "this" "member_expression" "template_string" "regex" "false" "call_expression" "generator_function" "object" "string" "true" "meta_property" "array"))) 
 ("statement" (:*unnamed* ("throw_statement" "declaration" "for_in_statement" "with_statement" "do_statement" "for_statement" "return_statement" "switch_statement" "expression_statement" "if_statement" "continue_statement" "export_statement" "statement_block" "debugger_statement" "try_statement" "empty_statement" "break_statement" "labeled_statement" "while_statement" "import_statement"))) 
 ("arguments" (:*unnamed* ("spread_element" "expression"))) 
 ("array" (:*unnamed* ("spread_element" "expression"))) 
 ("array_pattern" (:*unnamed* ("pattern" "assignment_pattern"))) 
 ("arrow_function" (:body ("statement_block" "expression") :parameter ("identifier") :parameters ("formal_parameters"))) 
 ("assignment_expression" (:left ("subscript_expression" "identifier" "undefined" "parenthesized_expression" "member_expression" "object_pattern" "array_pattern") :right ("expression"))) 
 ("assignment_pattern" (:left ("pattern") :right ("expression"))) 
 ("augmented_assignment_expression" (:left ("subscript_expression" "member_expression" "identifier" "parenthesized_expression") :operator nil :right ("expression"))) 
 ("await_expression" (:*unnamed* ("expression"))) 
 ("binary_expression" (:left ("expression") :operator nil :right ("expression"))) 
 ("break_statement" (:label ("statement_identifier"))) 
 ("call_expression" (:arguments ("template_string" "arguments") :function ("expression") :optional_chain ("optional_chain"))) 
 ("catch_clause" (:body ("statement_block") :parameter ("identifier" "object_pattern" "array_pattern"))) 
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier"))) 
 ("class_body" (:member ("class_static_block" "field_definition" "method_definition") :template ("glimmer_template"))) 
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier"))) 
 ("class_heritage" (:*unnamed* ("expression"))) 
 ("class_static_block" (:body ("statement_block"))) 
 ("computed_property_name" (:*unnamed* ("expression"))) 
 ("continue_statement" (:label ("statement_identifier"))) 
 ("decorator" (:*unnamed* ("member_expression" "identifier" "call_expression"))) 
 ("do_statement" (:body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("export_clause" (:*unnamed* ("export_specifier"))) 
 ("export_specifier" (:alias ("string" "identifier") :name ("string" "identifier"))) 
 ("export_statement" (:*unnamed* ("export_clause" "namespace_export") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression"))) 
 ("expression_statement" (:*unnamed* ("sequence_expression" "expression"))) 
 ("field_definition" (:decorator ("decorator") :property ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :value ("expression"))) 
 ("finally_clause" (:body ("statement_block"))) 
 ("for_in_statement" (:body ("statement") :kind nil :left ("subscript_expression" "identifier" "undefined" "parenthesized_expression" "member_expression" "object_pattern" "array_pattern") :operator nil :right ("sequence_expression" "expression") :value ("expression"))) 
 ("for_statement" (:body ("statement") :condition ("empty_statement" "expression_statement") :increment ("sequence_expression" "expression") :initializer ("empty_statement" "lexical_declaration" "expression_statement" "variable_declaration"))) 
 ("formal_parameters" (:*unnamed* ("pattern" "assignment_pattern"))) 
 ("function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("generator_function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("generator_function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("glimmer_template" (:close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag"))) 
 ("if_statement" (:alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("import_clause" (:*unnamed* ("namespace_import" "identifier" "named_imports"))) 
 ("import_specifier" (:alias ("identifier") :name ("string" "identifier"))) 
 ("import_statement" (:*unnamed* ("import_clause") :source ("string"))) 
 ("jsx_attribute" (:*unnamed* ("jsx_expression" "jsx_namespace_name" "jsx_element" "property_identifier" "jsx_fragment" "string" "jsx_self_closing_element"))) 
 ("jsx_closing_element" (:name ("jsx_namespace_name" "identifier" "nested_identifier"))) 
 ("jsx_element" (:*unnamed* ("jsx_expression" "jsx_element" "jsx_text" "jsx_fragment" "jsx_self_closing_element") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element"))) 
 ("jsx_expression" (:*unnamed* ("sequence_expression" "expression" "spread_element"))) 
 ("jsx_fragment" (:*unnamed* ("jsx_expression" "jsx_element" "jsx_text" "jsx_fragment" "jsx_self_closing_element"))) 
 ("jsx_namespace_name" (:*unnamed* ("identifier"))) 
 ("jsx_opening_element" (:attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "nested_identifier"))) 
 ("jsx_self_closing_element" (:attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "nested_identifier"))) 
 ("labeled_statement" (:body ("statement") :label ("statement_identifier"))) 
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil)) 
 ("member_expression" (:object ("expression") :optional_chain ("optional_chain") :property ("private_property_identifier" "property_identifier"))) 
 ("method_definition" (:body ("statement_block") :decorator ("decorator") :name ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :parameters ("formal_parameters"))) 
 ("named_imports" (:*unnamed* ("import_specifier"))) 
 ("namespace_export" (:*unnamed* ("string" "identifier"))) 
 ("namespace_import" (:*unnamed* ("identifier"))) 
 ("nested_identifier" (:*unnamed* ("identifier" "nested_identifier"))) 
 ("new_expression" (:arguments ("arguments") :constructor ("new_expression" "primary_expression"))) 
 ("object" (:*unnamed* ("pair" "spread_element" "shorthand_property_identifier" "method_definition"))) 
 ("object_assignment_pattern" (:left ("shorthand_property_identifier_pattern" "object_pattern" "array_pattern") :right ("expression"))) 
 ("object_pattern" (:*unnamed* ("rest_pattern" "shorthand_property_identifier_pattern" "pair_pattern" "object_assignment_pattern"))) 
 ("pair" (:key ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :value ("expression"))) 
 ("pair_pattern" (:key ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :value ("pattern" "assignment_pattern"))) 
 ("parenthesized_expression" (:*unnamed* ("sequence_expression" "expression"))) 
 ("program" (:*unnamed* ("statement" "hash_bang_line"))) 
 ("regex" (:flags ("regex_flags") :pattern ("regex_pattern"))) 
 ("rest_pattern" (:*unnamed* ("subscript_expression" "identifier" "undefined" "member_expression" "object_pattern" "array_pattern"))) 
 ("return_statement" (:*unnamed* ("sequence_expression" "expression"))) 
 ("sequence_expression" (:left ("expression") :right ("sequence_expression" "expression"))) 
 ("spread_element" (:*unnamed* ("expression"))) 
 ("statement_block" (:*unnamed* ("statement"))) 
 ("string" (:*unnamed* ("escape_sequence" "string_fragment"))) 
 ("subscript_expression" (:index ("sequence_expression" "expression") :object ("expression") :optional_chain ("optional_chain"))) 
 ("switch_body" (:*unnamed* ("switch_default" "switch_case"))) 
 ("switch_case" (:body ("statement") :value ("sequence_expression" "expression"))) 
 ("switch_default" (:body ("statement"))) 
 ("switch_statement" (:body ("switch_body") :value ("parenthesized_expression"))) 
 ("template_string" (:*unnamed* ("escape_sequence" "template_substitution"))) 
 ("template_substitution" (:*unnamed* ("sequence_expression" "expression"))) 
 ("ternary_expression" (:alternative ("expression") :condition ("expression") :consequence ("expression"))) 
 ("throw_statement" (:*unnamed* ("sequence_expression" "expression"))) 
 ("try_statement" (:body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause"))) 
 ("unary_expression" (:argument ("expression") :operator nil)) 
 ("update_expression" (:argument ("expression") :operator nil)) 
 ("variable_declaration" (:*unnamed* ("variable_declarator"))) 
 ("variable_declarator" (:name ("identifier" "object_pattern" "array_pattern") :value ("expression"))) 
 ("while_statement" (:body ("statement") :condition ("parenthesized_expression"))) 
 ("with_statement" (:body ("statement") :object ("parenthesized_expression"))) 
 ("yield_expression" (:*unnamed* ("expression"))) 
))

(defconst combobulate-rules-javascript-inverted 
 '(("lexical_declaration" ("for_statement" "declaration"))
   ("function_declaration" ("declaration"))
   ("variable_declaration" ("for_statement" "declaration"))
   ("class_declaration" ("declaration"))
   ("generator_function_declaration" ("declaration"))
   ("assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("new_expression" ("expression" "new_expression"))
   ("unary_expression" ("expression"))
   ("augmented_assignment_expression" ("expression"))
   ("yield_expression" ("expression"))
   ("ternary_expression" ("expression"))
   ("jsx_self_closing_element" ("expression" "jsx_element" "jsx_fragment" "jsx_attribute"))
   ("update_expression" ("expression"))
   ("jsx_element" ("expression" "jsx_element" "jsx_fragment" "jsx_attribute"))
   ("glimmer_template" ("expression" "class_body"))
   ("primary_expression" ("expression" "new_expression"))
   ("binary_expression" ("expression"))
   ("jsx_fragment" ("expression" "jsx_element" "jsx_fragment" "jsx_attribute"))
   ("rest_pattern" ("pattern" "object_pattern"))
   ("subscript_expression" ("assignment_expression" "augmented_assignment_expression" "rest_pattern" "pattern" "for_in_statement" "primary_expression"))
   ("identifier" ("arrow_function" "assignment_expression" "jsx_opening_element" "rest_pattern" "pattern" "for_in_statement" "primary_expression" "export_specifier" "decorator" "generator_function_declaration" "jsx_namespace_name" "jsx_closing_element" "function_declaration" "function" "variable_declarator" "nested_identifier" "class_declaration" "namespace_import" "class" "catch_clause" "augmented_assignment_expression" "generator_function" "jsx_self_closing_element" "import_clause" "namespace_export" "import_specifier"))
   ("undefined" ("assignment_expression" "rest_pattern" "pattern" "for_in_statement" "primary_expression"))
   ("member_expression" ("assignment_expression" "augmented_assignment_expression" "rest_pattern" "pattern" "for_in_statement" "primary_expression" "decorator"))
   ("object_pattern" ("assignment_expression" "variable_declarator" "object_assignment_pattern" "rest_pattern" "pattern" "for_in_statement" "catch_clause"))
   ("array_pattern" ("assignment_expression" "variable_declarator" "object_assignment_pattern" "rest_pattern" "pattern" "for_in_statement" "catch_clause"))
   ("arrow_function" ("primary_expression"))
   ("import" ("primary_expression"))
   ("function" ("primary_expression"))
   ("parenthesized_expression" ("assignment_expression" "if_statement" "switch_statement" "augmented_assignment_expression" "for_in_statement" "with_statement" "primary_expression" "while_statement" "do_statement"))
   ("null" ("primary_expression"))
   ("super" ("primary_expression"))
   ("number" ("pair" "field_definition" "method_definition" "primary_expression" "pair_pattern"))
   ("class" ("primary_expression"))
   ("this" ("primary_expression"))
   ("template_string" ("primary_expression" "call_expression"))
   ("regex" ("primary_expression"))
   ("false" ("primary_expression"))
   ("call_expression" ("decorator" "primary_expression"))
   ("generator_function" ("primary_expression"))
   ("object" ("primary_expression"))
   ("string" ("pair" "export_statement" "jsx_attribute" "field_definition" "export_specifier" "primary_expression" "import_specifier" "method_definition" "namespace_export" "import_statement" "pair_pattern"))
   ("true" ("primary_expression"))
   ("meta_property" ("primary_expression"))
   ("array" ("primary_expression"))
   ("throw_statement" ("statement"))
   ("declaration" ("statement" "export_statement"))
   ("for_in_statement" ("statement"))
   ("with_statement" ("statement"))
   ("do_statement" ("statement"))
   ("for_statement" ("statement"))
   ("return_statement" ("statement"))
   ("switch_statement" ("statement"))
   ("expression_statement" ("statement" "for_statement"))
   ("if_statement" ("statement"))
   ("continue_statement" ("statement"))
   ("export_statement" ("statement"))
   ("statement_block" ("arrow_function" "function" "generator_function" "try_statement" "generator_function_declaration" "class_static_block" "finally_clause" "method_definition" "statement" "function_declaration" "catch_clause"))
   ("debugger_statement" ("statement"))
   ("try_statement" ("statement"))
   ("empty_statement" ("statement" "for_statement"))
   ("break_statement" ("statement"))
   ("labeled_statement" ("statement"))
   ("while_statement" ("statement"))
   ("import_statement" ("statement"))
   ("spread_element" ("object" "jsx_expression" "arguments" "array"))
   ("expression" ("arrow_function" "assignment_expression" "pair" "jsx_expression" "parenthesized_expression" "yield_expression" "subscript_expression" "for_in_statement" "assignment_pattern" "member_expression" "binary_expression" "template_substitution" "return_statement" "await_expression" "expression_statement" "unary_expression" "ternary_expression" "sequence_expression" "throw_statement" "variable_declarator" "object_assignment_pattern" "update_expression" "field_definition" "class_heritage" "for_statement" "switch_case" "computed_property_name" "export_statement" "augmented_assignment_expression" "call_expression" "spread_element" "arguments" "array"))
   ("pattern" ("formal_parameters" "pair_pattern" "assignment_pattern" "array_pattern"))
   ("assignment_pattern" ("formal_parameters" "pair_pattern" "array_pattern"))
   ("formal_parameters" ("arrow_function" "function" "generator_function" "method_definition" "function_declaration" "generator_function_declaration"))
   ("statement_identifier" ("labeled_statement" "continue_statement" "break_statement"))
   ("arguments" ("new_expression" "call_expression"))
   ("optional_chain" ("subscript_expression" "member_expression" "call_expression"))
   ("class_heritage" ("class" "class_declaration"))
   ("class_body" ("class" "class_declaration"))
   ("decorator" ("export_statement" "class_declaration" "class" "field_definition" "method_definition"))
   ("class_static_block" ("class_body"))
   ("field_definition" ("class_body"))
   ("method_definition" ("object" "class_body"))
   ("statement" ("if_statement" "statement_block" "else_clause" "switch_default" "for_in_statement" "with_statement" "labeled_statement" "while_statement" "program" "do_statement" "for_statement" "switch_case"))
   ("export_specifier" ("export_clause"))
   ("export_clause" ("export_statement"))
   ("namespace_export" ("export_statement"))
   ("sequence_expression" ("return_statement" "throw_statement" "expression_statement" "jsx_expression" "parenthesized_expression" "subscript_expression" "for_in_statement" "sequence_expression" "template_substitution" "for_statement" "switch_case"))
   ("computed_property_name" ("pair" "pair_pattern" "field_definition" "method_definition"))
   ("private_property_identifier" ("pair" "field_definition" "method_definition" "member_expression" "pair_pattern"))
   ("property_identifier" ("pair" "jsx_attribute" "field_definition" "method_definition" "member_expression" "pair_pattern"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("else_clause" ("if_statement"))
   ("namespace_import" ("import_clause"))
   ("named_imports" ("import_clause"))
   ("import_clause" ("import_statement"))
   ("jsx_expression" ("jsx_attribute" "jsx_opening_element" "jsx_self_closing_element" "jsx_element" "jsx_fragment"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_closing_element" "jsx_attribute" "jsx_self_closing_element"))
   ("nested_identifier" ("jsx_opening_element" "nested_identifier" "jsx_closing_element" "jsx_self_closing_element"))
   ("jsx_text" ("jsx_fragment" "jsx_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("import_specifier" ("named_imports"))
   ("pair" ("object"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_pattern" "object_assignment_pattern"))
   ("pair_pattern" ("object_pattern"))
   ("object_assignment_pattern" ("object_pattern"))
   ("hash_bang_line" ("program"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("escape_sequence" ("template_string" "string"))
   ("string_fragment" ("string"))
   ("switch_default" ("switch_body"))
   ("switch_case" ("switch_body"))
   ("switch_body" ("switch_statement"))
   ("template_substitution" ("template_string"))
   ("finally_clause" ("try_statement"))
   ("catch_clause" ("try_statement"))
  ) 
)
;; END production rules for javascript





;; START Auto-generated production rules for `jsx'
(defconst combobulate-rules-jsx 
 '(("declaration" (:*unnamed* ("lexical_declaration" "function_declaration" "variable_declaration" "class_declaration" "generator_function_declaration"))) 
 ("expression" (:*unnamed* ("assignment_expression" "await_expression" "new_expression" "unary_expression" "augmented_assignment_expression" "yield_expression" "ternary_expression" "jsx_self_closing_element" "update_expression" "jsx_element" "glimmer_template" "primary_expression" "binary_expression" "jsx_fragment"))) 
 ("pattern" (:*unnamed* ("rest_pattern" "subscript_expression" "identifier" "undefined" "member_expression" "object_pattern" "array_pattern"))) 
 ("primary_expression" (:*unnamed* ("arrow_function" "import" "function" "undefined" "parenthesized_expression" "null" "subscript_expression" "super" "number" "class" "identifier" "this" "member_expression" "template_string" "regex" "false" "call_expression" "generator_function" "object" "string" "true" "meta_property" "array"))) 
 ("statement" (:*unnamed* ("throw_statement" "declaration" "for_in_statement" "with_statement" "do_statement" "for_statement" "return_statement" "switch_statement" "expression_statement" "if_statement" "continue_statement" "export_statement" "statement_block" "debugger_statement" "try_statement" "empty_statement" "break_statement" "labeled_statement" "while_statement" "import_statement"))) 
 ("arguments" (:*unnamed* ("spread_element" "expression"))) 
 ("array" (:*unnamed* ("spread_element" "expression"))) 
 ("array_pattern" (:*unnamed* ("pattern" "assignment_pattern"))) 
 ("arrow_function" (:body ("statement_block" "expression") :parameter ("identifier") :parameters ("formal_parameters"))) 
 ("assignment_expression" (:left ("subscript_expression" "identifier" "undefined" "parenthesized_expression" "member_expression" "object_pattern" "array_pattern") :right ("expression"))) 
 ("assignment_pattern" (:left ("pattern") :right ("expression"))) 
 ("augmented_assignment_expression" (:left ("subscript_expression" "member_expression" "identifier" "parenthesized_expression") :operator nil :right ("expression"))) 
 ("await_expression" (:*unnamed* ("expression"))) 
 ("binary_expression" (:left ("expression") :operator nil :right ("expression"))) 
 ("break_statement" (:label ("statement_identifier"))) 
 ("call_expression" (:arguments ("template_string" "arguments") :function ("expression") :optional_chain ("optional_chain"))) 
 ("catch_clause" (:body ("statement_block") :parameter ("identifier" "object_pattern" "array_pattern"))) 
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier"))) 
 ("class_body" (:member ("class_static_block" "field_definition" "method_definition") :template ("glimmer_template"))) 
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier"))) 
 ("class_heritage" (:*unnamed* ("expression"))) 
 ("class_static_block" (:body ("statement_block"))) 
 ("computed_property_name" (:*unnamed* ("expression"))) 
 ("continue_statement" (:label ("statement_identifier"))) 
 ("decorator" (:*unnamed* ("member_expression" "identifier" "call_expression"))) 
 ("do_statement" (:body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("export_clause" (:*unnamed* ("export_specifier"))) 
 ("export_specifier" (:alias ("string" "identifier") :name ("string" "identifier"))) 
 ("export_statement" (:*unnamed* ("export_clause" "namespace_export") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression"))) 
 ("expression_statement" (:*unnamed* ("sequence_expression" "expression"))) 
 ("field_definition" (:decorator ("decorator") :property ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :value ("expression"))) 
 ("finally_clause" (:body ("statement_block"))) 
 ("for_in_statement" (:body ("statement") :kind nil :left ("subscript_expression" "identifier" "undefined" "parenthesized_expression" "member_expression" "object_pattern" "array_pattern") :operator nil :right ("sequence_expression" "expression") :value ("expression"))) 
 ("for_statement" (:body ("statement") :condition ("empty_statement" "expression_statement") :increment ("sequence_expression" "expression") :initializer ("empty_statement" "lexical_declaration" "expression_statement" "variable_declaration"))) 
 ("formal_parameters" (:*unnamed* ("pattern" "assignment_pattern"))) 
 ("function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("generator_function" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("generator_function_declaration" (:body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("glimmer_template" (:close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag"))) 
 ("if_statement" (:alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("import_clause" (:*unnamed* ("namespace_import" "identifier" "named_imports"))) 
 ("import_specifier" (:alias ("identifier") :name ("string" "identifier"))) 
 ("import_statement" (:*unnamed* ("import_clause") :source ("string"))) 
 ("jsx_attribute" (:*unnamed* ("jsx_expression" "jsx_namespace_name" "jsx_element" "property_identifier" "jsx_fragment" "string" "jsx_self_closing_element"))) 
 ("jsx_closing_element" (:name ("jsx_namespace_name" "identifier" "nested_identifier"))) 
 ("jsx_element" (:*unnamed* ("jsx_expression" "jsx_element" "jsx_text" "jsx_fragment" "jsx_self_closing_element") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element"))) 
 ("jsx_expression" (:*unnamed* ("sequence_expression" "expression" "spread_element"))) 
 ("jsx_fragment" (:*unnamed* ("jsx_expression" "jsx_element" "jsx_text" "jsx_fragment" "jsx_self_closing_element"))) 
 ("jsx_namespace_name" (:*unnamed* ("identifier"))) 
 ("jsx_opening_element" (:attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "nested_identifier"))) 
 ("jsx_self_closing_element" (:attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "nested_identifier"))) 
 ("labeled_statement" (:body ("statement") :label ("statement_identifier"))) 
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil)) 
 ("member_expression" (:object ("expression") :optional_chain ("optional_chain") :property ("private_property_identifier" "property_identifier"))) 
 ("method_definition" (:body ("statement_block") :decorator ("decorator") :name ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :parameters ("formal_parameters"))) 
 ("named_imports" (:*unnamed* ("import_specifier"))) 
 ("namespace_export" (:*unnamed* ("string" "identifier"))) 
 ("namespace_import" (:*unnamed* ("identifier"))) 
 ("nested_identifier" (:*unnamed* ("identifier" "nested_identifier"))) 
 ("new_expression" (:arguments ("arguments") :constructor ("new_expression" "primary_expression"))) 
 ("object" (:*unnamed* ("pair" "spread_element" "shorthand_property_identifier" "method_definition"))) 
 ("object_assignment_pattern" (:left ("shorthand_property_identifier_pattern" "object_pattern" "array_pattern") :right ("expression"))) 
 ("object_pattern" (:*unnamed* ("rest_pattern" "shorthand_property_identifier_pattern" "pair_pattern" "object_assignment_pattern"))) 
 ("pair" (:key ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :value ("expression"))) 
 ("pair_pattern" (:key ("computed_property_name" "private_property_identifier" "number" "property_identifier" "string") :value ("pattern" "assignment_pattern"))) 
 ("parenthesized_expression" (:*unnamed* ("sequence_expression" "expression"))) 
 ("program" (:*unnamed* ("statement" "hash_bang_line"))) 
 ("regex" (:flags ("regex_flags") :pattern ("regex_pattern"))) 
 ("rest_pattern" (:*unnamed* ("subscript_expression" "identifier" "undefined" "member_expression" "object_pattern" "array_pattern"))) 
 ("return_statement" (:*unnamed* ("sequence_expression" "expression"))) 
 ("sequence_expression" (:left ("expression") :right ("sequence_expression" "expression"))) 
 ("spread_element" (:*unnamed* ("expression"))) 
 ("statement_block" (:*unnamed* ("statement"))) 
 ("string" (:*unnamed* ("escape_sequence" "string_fragment"))) 
 ("subscript_expression" (:index ("sequence_expression" "expression") :object ("expression") :optional_chain ("optional_chain"))) 
 ("switch_body" (:*unnamed* ("switch_default" "switch_case"))) 
 ("switch_case" (:body ("statement") :value ("sequence_expression" "expression"))) 
 ("switch_default" (:body ("statement"))) 
 ("switch_statement" (:body ("switch_body") :value ("parenthesized_expression"))) 
 ("template_string" (:*unnamed* ("escape_sequence" "template_substitution"))) 
 ("template_substitution" (:*unnamed* ("sequence_expression" "expression"))) 
 ("ternary_expression" (:alternative ("expression") :condition ("expression") :consequence ("expression"))) 
 ("throw_statement" (:*unnamed* ("sequence_expression" "expression"))) 
 ("try_statement" (:body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause"))) 
 ("unary_expression" (:argument ("expression") :operator nil)) 
 ("update_expression" (:argument ("expression") :operator nil)) 
 ("variable_declaration" (:*unnamed* ("variable_declarator"))) 
 ("variable_declarator" (:name ("identifier" "object_pattern" "array_pattern") :value ("expression"))) 
 ("while_statement" (:body ("statement") :condition ("parenthesized_expression"))) 
 ("with_statement" (:body ("statement") :object ("parenthesized_expression"))) 
 ("yield_expression" (:*unnamed* ("expression"))) 
))

(defconst combobulate-rules-jsx-inverted 
 '(("lexical_declaration" ("for_statement" "declaration"))
   ("function_declaration" ("declaration"))
   ("variable_declaration" ("for_statement" "declaration"))
   ("class_declaration" ("declaration"))
   ("generator_function_declaration" ("declaration"))
   ("assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("new_expression" ("expression" "new_expression"))
   ("unary_expression" ("expression"))
   ("augmented_assignment_expression" ("expression"))
   ("yield_expression" ("expression"))
   ("ternary_expression" ("expression"))
   ("jsx_self_closing_element" ("expression" "jsx_element" "jsx_fragment" "jsx_attribute"))
   ("update_expression" ("expression"))
   ("jsx_element" ("expression" "jsx_element" "jsx_fragment" "jsx_attribute"))
   ("glimmer_template" ("expression" "class_body"))
   ("primary_expression" ("expression" "new_expression"))
   ("binary_expression" ("expression"))
   ("jsx_fragment" ("expression" "jsx_element" "jsx_fragment" "jsx_attribute"))
   ("rest_pattern" ("pattern" "object_pattern"))
   ("subscript_expression" ("assignment_expression" "augmented_assignment_expression" "rest_pattern" "pattern" "for_in_statement" "primary_expression"))
   ("identifier" ("arrow_function" "assignment_expression" "jsx_opening_element" "rest_pattern" "pattern" "for_in_statement" "primary_expression" "export_specifier" "decorator" "generator_function_declaration" "jsx_namespace_name" "jsx_closing_element" "function_declaration" "function" "variable_declarator" "nested_identifier" "class_declaration" "namespace_import" "class" "catch_clause" "augmented_assignment_expression" "generator_function" "jsx_self_closing_element" "import_clause" "namespace_export" "import_specifier"))
   ("undefined" ("assignment_expression" "rest_pattern" "pattern" "for_in_statement" "primary_expression"))
   ("member_expression" ("assignment_expression" "augmented_assignment_expression" "rest_pattern" "pattern" "for_in_statement" "primary_expression" "decorator"))
   ("object_pattern" ("assignment_expression" "variable_declarator" "object_assignment_pattern" "rest_pattern" "pattern" "for_in_statement" "catch_clause"))
   ("array_pattern" ("assignment_expression" "variable_declarator" "object_assignment_pattern" "rest_pattern" "pattern" "for_in_statement" "catch_clause"))
   ("arrow_function" ("primary_expression"))
   ("import" ("primary_expression"))
   ("function" ("primary_expression"))
   ("parenthesized_expression" ("assignment_expression" "if_statement" "switch_statement" "augmented_assignment_expression" "for_in_statement" "with_statement" "primary_expression" "while_statement" "do_statement"))
   ("null" ("primary_expression"))
   ("super" ("primary_expression"))
   ("number" ("pair" "field_definition" "method_definition" "primary_expression" "pair_pattern"))
   ("class" ("primary_expression"))
   ("this" ("primary_expression"))
   ("template_string" ("primary_expression" "call_expression"))
   ("regex" ("primary_expression"))
   ("false" ("primary_expression"))
   ("call_expression" ("decorator" "primary_expression"))
   ("generator_function" ("primary_expression"))
   ("object" ("primary_expression"))
   ("string" ("pair" "export_statement" "jsx_attribute" "field_definition" "export_specifier" "primary_expression" "import_specifier" "method_definition" "namespace_export" "import_statement" "pair_pattern"))
   ("true" ("primary_expression"))
   ("meta_property" ("primary_expression"))
   ("array" ("primary_expression"))
   ("throw_statement" ("statement"))
   ("declaration" ("statement" "export_statement"))
   ("for_in_statement" ("statement"))
   ("with_statement" ("statement"))
   ("do_statement" ("statement"))
   ("for_statement" ("statement"))
   ("return_statement" ("statement"))
   ("switch_statement" ("statement"))
   ("expression_statement" ("statement" "for_statement"))
   ("if_statement" ("statement"))
   ("continue_statement" ("statement"))
   ("export_statement" ("statement"))
   ("statement_block" ("arrow_function" "function" "generator_function" "try_statement" "generator_function_declaration" "class_static_block" "finally_clause" "method_definition" "statement" "function_declaration" "catch_clause"))
   ("debugger_statement" ("statement"))
   ("try_statement" ("statement"))
   ("empty_statement" ("statement" "for_statement"))
   ("break_statement" ("statement"))
   ("labeled_statement" ("statement"))
   ("while_statement" ("statement"))
   ("import_statement" ("statement"))
   ("spread_element" ("object" "jsx_expression" "arguments" "array"))
   ("expression" ("arrow_function" "assignment_expression" "pair" "jsx_expression" "parenthesized_expression" "yield_expression" "subscript_expression" "for_in_statement" "assignment_pattern" "member_expression" "binary_expression" "template_substitution" "return_statement" "await_expression" "expression_statement" "unary_expression" "ternary_expression" "sequence_expression" "throw_statement" "variable_declarator" "object_assignment_pattern" "update_expression" "field_definition" "class_heritage" "for_statement" "switch_case" "computed_property_name" "export_statement" "augmented_assignment_expression" "call_expression" "spread_element" "arguments" "array"))
   ("pattern" ("formal_parameters" "pair_pattern" "assignment_pattern" "array_pattern"))
   ("assignment_pattern" ("formal_parameters" "pair_pattern" "array_pattern"))
   ("formal_parameters" ("arrow_function" "function" "generator_function" "method_definition" "function_declaration" "generator_function_declaration"))
   ("statement_identifier" ("labeled_statement" "continue_statement" "break_statement"))
   ("arguments" ("new_expression" "call_expression"))
   ("optional_chain" ("subscript_expression" "member_expression" "call_expression"))
   ("class_heritage" ("class" "class_declaration"))
   ("class_body" ("class" "class_declaration"))
   ("decorator" ("export_statement" "class_declaration" "class" "field_definition" "method_definition"))
   ("class_static_block" ("class_body"))
   ("field_definition" ("class_body"))
   ("method_definition" ("object" "class_body"))
   ("statement" ("if_statement" "statement_block" "else_clause" "switch_default" "for_in_statement" "with_statement" "labeled_statement" "while_statement" "program" "do_statement" "for_statement" "switch_case"))
   ("export_specifier" ("export_clause"))
   ("export_clause" ("export_statement"))
   ("namespace_export" ("export_statement"))
   ("sequence_expression" ("return_statement" "throw_statement" "expression_statement" "jsx_expression" "parenthesized_expression" "subscript_expression" "for_in_statement" "sequence_expression" "template_substitution" "for_statement" "switch_case"))
   ("computed_property_name" ("pair" "pair_pattern" "field_definition" "method_definition"))
   ("private_property_identifier" ("pair" "field_definition" "method_definition" "member_expression" "pair_pattern"))
   ("property_identifier" ("pair" "jsx_attribute" "field_definition" "method_definition" "member_expression" "pair_pattern"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("else_clause" ("if_statement"))
   ("namespace_import" ("import_clause"))
   ("named_imports" ("import_clause"))
   ("import_clause" ("import_statement"))
   ("jsx_expression" ("jsx_attribute" "jsx_opening_element" "jsx_self_closing_element" "jsx_element" "jsx_fragment"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_closing_element" "jsx_attribute" "jsx_self_closing_element"))
   ("nested_identifier" ("jsx_opening_element" "nested_identifier" "jsx_closing_element" "jsx_self_closing_element"))
   ("jsx_text" ("jsx_fragment" "jsx_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("import_specifier" ("named_imports"))
   ("pair" ("object"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_pattern" "object_assignment_pattern"))
   ("pair_pattern" ("object_pattern"))
   ("object_assignment_pattern" ("object_pattern"))
   ("hash_bang_line" ("program"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("escape_sequence" ("template_string" "string"))
   ("string_fragment" ("string"))
   ("switch_default" ("switch_body"))
   ("switch_case" ("switch_body"))
   ("switch_body" ("switch_statement"))
   ("template_substitution" ("template_string"))
   ("finally_clause" ("try_statement"))
   ("catch_clause" ("try_statement"))
  ) 
)
;; END production rules for jsx





;; START Auto-generated production rules for `go'
(defconst combobulate-rules-go 
 '(("_expression" (:*unnamed* ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("_simple_statement" (:*unnamed* ("send_statement" "slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "dec_statement" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "inc_statement" "short_var_declaration" "selector_expression" "int_literal" "true" "composite_literal" "nil" "assignment_statement" "interpreted_string_literal" "iota" "func_literal"))) 
 ("_simple_type" (:*unnamed* ("generic_type" "map_type" "type_identifier" "pointer_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("_statement" (:*unnamed* ("send_statement" "slice_expression" "parenthesized_expression" "rune_literal" "index_expression" "dec_statement" "raw_string_literal" "binary_expression" "var_declaration" "defer_statement" "return_statement" "expression_switch_statement" "unary_expression" "select_statement" "goto_statement" "int_literal" "empty_statement" "nil" "break_statement" "labeled_statement" "block" "interpreted_string_literal" "type_conversion_expression" "type_declaration" "iota" "func_literal" "fallthrough_statement" "const_declaration" "imaginary_literal" "identifier" "for_statement" "if_statement" "type_assertion_expression" "continue_statement" "false" "call_expression" "float_literal" "inc_statement" "go_statement" "short_var_declaration" "selector_expression" "true" "composite_literal" "type_switch_statement" "assignment_statement"))) 
 ("_type" (:*unnamed* ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("argument_list" (:*unnamed* ("slice_expression" "type_identifier" "parenthesized_expression" "rune_literal" "parenthesized_type" "index_expression" "raw_string_literal" "channel_type" "binary_expression" "qualified_type" "unary_expression" "pointer_type" "int_literal" "nil" "variadic_argument" "interpreted_string_literal" "type_conversion_expression" "iota" "array_type" "interface_type" "func_literal" "generic_type" "map_type" "imaginary_literal" "struct_type" "identifier" "function_type" "slice_type" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "true" "composite_literal"))) 
 ("array_type" (:element ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type") :length ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("assignment_statement" (:left ("expression_list") :operator nil :right ("expression_list"))) 
 ("binary_expression" (:left ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal") :operator nil :right ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("block" (:*unnamed* ("send_statement" "slice_expression" "parenthesized_expression" "rune_literal" "index_expression" "dec_statement" "raw_string_literal" "binary_expression" "var_declaration" "defer_statement" "return_statement" "expression_switch_statement" "unary_expression" "select_statement" "goto_statement" "int_literal" "empty_statement" "nil" "break_statement" "labeled_statement" "block" "interpreted_string_literal" "type_conversion_expression" "type_declaration" "iota" "func_literal" "fallthrough_statement" "const_declaration" "imaginary_literal" "identifier" "for_statement" "if_statement" "type_assertion_expression" "continue_statement" "false" "call_expression" "float_literal" "inc_statement" "go_statement" "short_var_declaration" "selector_expression" "true" "composite_literal" "type_switch_statement" "assignment_statement"))) 
 ("break_statement" (:*unnamed* ("label_name"))) 
 ("call_expression" (:arguments ("argument_list") :function ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal") :type_arguments ("type_arguments"))) 
 ("channel_type" (:value ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("communication_case" (:*unnamed* ("send_statement" "slice_expression" "parenthesized_expression" "rune_literal" "index_expression" "dec_statement" "raw_string_literal" "binary_expression" "var_declaration" "defer_statement" "return_statement" "expression_switch_statement" "unary_expression" "select_statement" "goto_statement" "int_literal" "empty_statement" "nil" "break_statement" "labeled_statement" "block" "interpreted_string_literal" "type_conversion_expression" "type_declaration" "iota" "func_literal" "fallthrough_statement" "const_declaration" "imaginary_literal" "identifier" "for_statement" "if_statement" "type_assertion_expression" "continue_statement" "false" "call_expression" "float_literal" "inc_statement" "go_statement" "short_var_declaration" "selector_expression" "true" "composite_literal" "type_switch_statement" "assignment_statement") :communication ("send_statement" "receive_statement"))) 
 ("composite_literal" (:body ("literal_value") :type ("map_type" "generic_type" "type_identifier" "implicit_length_array_type" "struct_type" "slice_type" "qualified_type" "array_type"))) 
 ("const_declaration" (:*unnamed* ("const_spec"))) 
 ("const_spec" (:name ("identifier") :type ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type") :value ("expression_list"))) 
 ("constraint_elem" (:*unnamed* ("constraint_term"))) 
 ("constraint_term" (:*unnamed* ("type_identifier"))) 
 ("continue_statement" (:*unnamed* ("label_name"))) 
 ("dec_statement" (:*unnamed* ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("default_case" (:*unnamed* ("send_statement" "slice_expression" "parenthesized_expression" "rune_literal" "index_expression" "dec_statement" "raw_string_literal" "binary_expression" "var_declaration" "defer_statement" "return_statement" "expression_switch_statement" "unary_expression" "select_statement" "goto_statement" "int_literal" "empty_statement" "nil" "break_statement" "labeled_statement" "block" "interpreted_string_literal" "type_conversion_expression" "type_declaration" "iota" "func_literal" "fallthrough_statement" "const_declaration" "imaginary_literal" "identifier" "for_statement" "if_statement" "type_assertion_expression" "continue_statement" "false" "call_expression" "float_literal" "inc_statement" "go_statement" "short_var_declaration" "selector_expression" "true" "composite_literal" "type_switch_statement" "assignment_statement"))) 
 ("defer_statement" (:*unnamed* ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("expression_case" (:*unnamed* ("send_statement" "slice_expression" "parenthesized_expression" "rune_literal" "index_expression" "dec_statement" "raw_string_literal" "binary_expression" "var_declaration" "defer_statement" "return_statement" "expression_switch_statement" "unary_expression" "select_statement" "goto_statement" "int_literal" "empty_statement" "nil" "break_statement" "labeled_statement" "block" "interpreted_string_literal" "type_conversion_expression" "type_declaration" "iota" "func_literal" "fallthrough_statement" "const_declaration" "imaginary_literal" "identifier" "for_statement" "if_statement" "type_assertion_expression" "continue_statement" "false" "call_expression" "float_literal" "inc_statement" "go_statement" "short_var_declaration" "selector_expression" "true" "composite_literal" "type_switch_statement" "assignment_statement") :value ("expression_list"))) 
 ("expression_list" (:*unnamed* ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("expression_switch_statement" (:*unnamed* ("default_case" "expression_case") :initializer ("send_statement" "slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "dec_statement" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "inc_statement" "short_var_declaration" "selector_expression" "int_literal" "true" "composite_literal" "nil" "assignment_statement" "interpreted_string_literal" "iota" "func_literal") :value ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("field_declaration" (:name ("field_identifier") :tag ("interpreted_string_literal" "raw_string_literal") :type ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("field_declaration_list" (:*unnamed* ("field_declaration"))) 
 ("for_clause" (:condition ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal") :initializer ("send_statement" "slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "dec_statement" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "inc_statement" "short_var_declaration" "selector_expression" "int_literal" "true" "composite_literal" "nil" "assignment_statement" "interpreted_string_literal" "iota" "func_literal") :update ("send_statement" "slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "dec_statement" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "inc_statement" "short_var_declaration" "selector_expression" "int_literal" "true" "composite_literal" "nil" "assignment_statement" "interpreted_string_literal" "iota" "func_literal"))) 
 ("for_statement" (:*unnamed* ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "range_clause" "selector_expression" "int_literal" "true" "composite_literal" "nil" "for_clause" "interpreted_string_literal" "iota" "func_literal") :body ("block"))) 
 ("func_literal" (:body ("block") :parameters ("parameter_list") :result ("generic_type" "map_type" "type_identifier" "pointer_type" "parameter_list" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("function_declaration" (:body ("block") :name ("identifier") :parameters ("parameter_list") :result ("generic_type" "map_type" "type_identifier" "pointer_type" "parameter_list" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type") :type_parameters ("type_parameter_list"))) 
 ("function_type" (:parameters ("parameter_list") :result ("generic_type" "map_type" "type_identifier" "pointer_type" "parameter_list" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("generic_type" (:type ("qualified_type" "type_identifier") :type_arguments ("type_arguments"))) 
 ("go_statement" (:*unnamed* ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("goto_statement" (:*unnamed* ("label_name"))) 
 ("if_statement" (:alternative ("if_statement" "block") :condition ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal") :consequence ("block") :initializer ("send_statement" "slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "dec_statement" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "inc_statement" "short_var_declaration" "selector_expression" "int_literal" "true" "composite_literal" "nil" "assignment_statement" "interpreted_string_literal" "iota" "func_literal"))) 
 ("implicit_length_array_type" (:element ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("import_declaration" (:*unnamed* ("import_spec_list" "import_spec"))) 
 ("import_spec" (:name ("package_identifier" "blank_identifier" "dot") :path ("interpreted_string_literal" "raw_string_literal"))) 
 ("import_spec_list" (:*unnamed* ("import_spec"))) 
 ("inc_statement" (:*unnamed* ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("index_expression" (:index ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal") :operand ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("interface_type" (:*unnamed* ("struct_elem" "constraint_elem" "method_spec" "interface_type_name"))) 
 ("interface_type_name" (:*unnamed* ("qualified_type" "type_identifier"))) 
 ("interpreted_string_literal" (:*unnamed* ("escape_sequence"))) 
 ("keyed_element" (:*unnamed* ("literal_element"))) 
 ("labeled_statement" (:*unnamed* ("send_statement" "slice_expression" "parenthesized_expression" "rune_literal" "index_expression" "dec_statement" "raw_string_literal" "binary_expression" "var_declaration" "defer_statement" "return_statement" "expression_switch_statement" "unary_expression" "select_statement" "goto_statement" "int_literal" "empty_statement" "nil" "break_statement" "labeled_statement" "block" "interpreted_string_literal" "type_conversion_expression" "type_declaration" "iota" "func_literal" "fallthrough_statement" "const_declaration" "imaginary_literal" "identifier" "for_statement" "if_statement" "type_assertion_expression" "continue_statement" "false" "call_expression" "float_literal" "inc_statement" "go_statement" "short_var_declaration" "selector_expression" "true" "composite_literal" "type_switch_statement" "assignment_statement") :label ("label_name"))) 
 ("literal_element" (:*unnamed* ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "literal_value" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("literal_value" (:*unnamed* ("keyed_element" "literal_element"))) 
 ("map_type" (:key ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type") :value ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("method_declaration" (:body ("block") :name ("field_identifier") :parameters ("parameter_list") :receiver ("parameter_list") :result ("generic_type" "map_type" "type_identifier" "pointer_type" "parameter_list" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("method_spec" (:name ("field_identifier") :parameters ("parameter_list") :result ("generic_type" "map_type" "type_identifier" "pointer_type" "parameter_list" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("package_clause" (:*unnamed* ("package_identifier"))) 
 ("parameter_declaration" (:name ("identifier") :type ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("parameter_list" (:*unnamed* ("variadic_parameter_declaration" "parameter_declaration"))) 
 ("parenthesized_expression" (:*unnamed* ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("parenthesized_type" (:*unnamed* ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("pointer_type" (:*unnamed* ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("qualified_type" (:name ("type_identifier") :package ("package_identifier"))) 
 ("range_clause" (:left ("expression_list") :right ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("receive_statement" (:left ("expression_list") :right ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("return_statement" (:*unnamed* ("expression_list"))) 
 ("select_statement" (:*unnamed* ("default_case" "communication_case"))) 
 ("selector_expression" (:field ("field_identifier") :operand ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("send_statement" (:channel ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal") :value ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("short_var_declaration" (:left ("expression_list") :right ("expression_list"))) 
 ("slice_expression" (:capacity ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal") :end ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal") :operand ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal") :start ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("slice_type" (:element ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("source_file" (:*unnamed* ("send_statement" "slice_expression" "package_clause" "parenthesized_expression" "rune_literal" "index_expression" "dec_statement" "raw_string_literal" "binary_expression" "var_declaration" "defer_statement" "return_statement" "expression_switch_statement" "unary_expression" "select_statement" "goto_statement" "int_literal" "empty_statement" "nil" "break_statement" "labeled_statement" "block" "interpreted_string_literal" "function_declaration" "import_declaration" "type_conversion_expression" "type_declaration" "iota" "func_literal" "fallthrough_statement" "const_declaration" "imaginary_literal" "identifier" "for_statement" "if_statement" "type_assertion_expression" "continue_statement" "false" "call_expression" "float_literal" "inc_statement" "go_statement" "short_var_declaration" "selector_expression" "true" "composite_literal" "type_switch_statement" "assignment_statement" "method_declaration"))) 
 ("struct_elem" (:*unnamed* ("struct_term"))) 
 ("struct_term" (:*unnamed* ("struct_type"))) 
 ("struct_type" (:*unnamed* ("field_declaration_list"))) 
 ("type_alias" (:name ("type_identifier") :type ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("type_arguments" (:*unnamed* ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("type_assertion_expression" (:operand ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal") :type ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("type_case" (:*unnamed* ("send_statement" "slice_expression" "parenthesized_expression" "rune_literal" "index_expression" "dec_statement" "raw_string_literal" "binary_expression" "var_declaration" "defer_statement" "return_statement" "expression_switch_statement" "unary_expression" "select_statement" "goto_statement" "int_literal" "empty_statement" "nil" "break_statement" "labeled_statement" "block" "interpreted_string_literal" "type_conversion_expression" "type_declaration" "iota" "func_literal" "fallthrough_statement" "const_declaration" "imaginary_literal" "identifier" "for_statement" "if_statement" "type_assertion_expression" "continue_statement" "false" "call_expression" "float_literal" "inc_statement" "go_statement" "short_var_declaration" "selector_expression" "true" "composite_literal" "type_switch_statement" "assignment_statement") :type ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("type_conversion_expression" (:operand ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal") :type ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
 ("type_declaration" (:*unnamed* ("type_spec" "type_alias"))) 
 ("type_parameter_list" (:*unnamed* ("parameter_declaration"))) 
 ("type_spec" (:name ("type_identifier") :type ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type") :type_parameters ("type_parameter_list"))) 
 ("type_switch_statement" (:*unnamed* ("default_case" "type_case") :alias ("expression_list") :initializer ("send_statement" "slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "dec_statement" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "inc_statement" "short_var_declaration" "selector_expression" "int_literal" "true" "composite_literal" "nil" "assignment_statement" "interpreted_string_literal" "iota" "func_literal") :value ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("unary_expression" (:operand ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal") :operator nil)) 
 ("var_declaration" (:*unnamed* ("var_spec"))) 
 ("var_spec" (:name ("identifier") :type ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type") :value ("expression_list"))) 
 ("variadic_argument" (:*unnamed* ("slice_expression" "type_conversion_expression" "parenthesized_expression" "rune_literal" "index_expression" "imaginary_literal" "raw_string_literal" "identifier" "binary_expression" "unary_expression" "false" "type_assertion_expression" "call_expression" "float_literal" "selector_expression" "int_literal" "true" "composite_literal" "nil" "interpreted_string_literal" "iota" "func_literal"))) 
 ("variadic_parameter_declaration" (:name ("identifier") :type ("generic_type" "map_type" "type_identifier" "pointer_type" "parenthesized_type" "struct_type" "function_type" "channel_type" "slice_type" "qualified_type" "array_type" "interface_type"))) 
))

(defconst combobulate-rules-go-inverted 
 '(("slice_expression" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("type_conversion_expression" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("parenthesized_expression" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("rune_literal" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("index_expression" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("imaginary_literal" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("raw_string_literal" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "import_spec" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "field_declaration" "type_switch_statement"))
   ("identifier" ("const_spec" "send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "function_declaration" "type_conversion_expression" "array_type" "type_case" "source_file" "variadic_parameter_declaration" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "parameter_declaration" "call_expression" "literal_element" "inc_statement" "go_statement" "var_spec" "selector_expression" "receive_statement" "type_switch_statement"))
   ("binary_expression" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("unary_expression" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("false" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("type_assertion_expression" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("call_expression" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("float_literal" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("selector_expression" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("int_literal" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("true" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("composite_literal" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("nil" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("interpreted_string_literal" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "import_spec" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "field_declaration" "type_switch_statement"))
   ("iota" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("func_literal" ("send_statement" "slice_expression" "parenthesized_expression" "default_case" "expression_case" "index_expression" "communication_case" "dec_statement" "_statement" "binary_expression" "defer_statement" "expression_switch_statement" "unary_expression" "range_clause" "expression_list" "block" "for_clause" "labeled_statement" "variadic_argument" "type_conversion_expression" "array_type" "type_case" "source_file" "_simple_statement" "argument_list" "for_statement" "if_statement" "_expression" "type_assertion_expression" "call_expression" "literal_element" "inc_statement" "go_statement" "selector_expression" "receive_statement" "type_switch_statement"))
   ("send_statement" ("expression_switch_statement" "if_statement" "default_case" "expression_case" "communication_case" "source_file" "type_switch_statement" "block" "for_clause" "_statement" "_simple_statement" "labeled_statement" "type_case"))
   ("dec_statement" ("expression_switch_statement" "if_statement" "default_case" "expression_case" "communication_case" "source_file" "type_switch_statement" "block" "for_clause" "_statement" "_simple_statement" "labeled_statement" "type_case"))
   ("inc_statement" ("expression_switch_statement" "if_statement" "default_case" "expression_case" "communication_case" "source_file" "type_switch_statement" "block" "for_clause" "_statement" "_simple_statement" "labeled_statement" "type_case"))
   ("short_var_declaration" ("expression_switch_statement" "if_statement" "default_case" "expression_case" "communication_case" "source_file" "type_switch_statement" "block" "for_clause" "_statement" "_simple_statement" "labeled_statement" "type_case"))
   ("assignment_statement" ("expression_switch_statement" "if_statement" "default_case" "expression_case" "communication_case" "source_file" "type_switch_statement" "block" "for_clause" "_statement" "_simple_statement" "labeled_statement" "type_case"))
   ("generic_type" ("const_spec" "parenthesized_type" "channel_type" "_type" "pointer_type" "function_declaration" "type_conversion_expression" "_simple_type" "array_type" "func_literal" "type_case" "map_type" "type_arguments" "variadic_parameter_declaration" "function_type" "argument_list" "slice_type" "type_assertion_expression" "parameter_declaration" "type_spec" "var_spec" "implicit_length_array_type" "composite_literal" "field_declaration" "method_spec" "type_alias" "method_declaration"))
   ("map_type" ("const_spec" "parenthesized_type" "channel_type" "_type" "pointer_type" "function_declaration" "type_conversion_expression" "_simple_type" "array_type" "func_literal" "type_case" "map_type" "type_arguments" "variadic_parameter_declaration" "function_type" "argument_list" "slice_type" "type_assertion_expression" "parameter_declaration" "type_spec" "var_spec" "implicit_length_array_type" "composite_literal" "field_declaration" "method_spec" "type_alias" "method_declaration"))
   ("type_identifier" ("const_spec" "parenthesized_type" "channel_type" "qualified_type" "_type" "pointer_type" "function_declaration" "type_conversion_expression" "_simple_type" "array_type" "func_literal" "type_case" "generic_type" "map_type" "type_arguments" "variadic_parameter_declaration" "function_type" "constraint_term" "argument_list" "slice_type" "type_assertion_expression" "parameter_declaration" "type_spec" "var_spec" "interface_type_name" "implicit_length_array_type" "composite_literal" "field_declaration" "method_spec" "type_alias" "method_declaration"))
   ("pointer_type" ("const_spec" "parenthesized_type" "channel_type" "_type" "pointer_type" "function_declaration" "type_conversion_expression" "_simple_type" "array_type" "func_literal" "type_case" "map_type" "type_arguments" "variadic_parameter_declaration" "function_type" "argument_list" "slice_type" "type_assertion_expression" "parameter_declaration" "type_spec" "var_spec" "implicit_length_array_type" "field_declaration" "method_spec" "type_alias" "method_declaration"))
   ("struct_type" ("const_spec" "parenthesized_type" "channel_type" "_type" "pointer_type" "function_declaration" "type_conversion_expression" "_simple_type" "array_type" "func_literal" "type_case" "map_type" "type_arguments" "variadic_parameter_declaration" "function_type" "argument_list" "slice_type" "type_assertion_expression" "parameter_declaration" "type_spec" "var_spec" "implicit_length_array_type" "struct_term" "composite_literal" "field_declaration" "method_spec" "type_alias" "method_declaration"))
   ("function_type" ("const_spec" "parenthesized_type" "channel_type" "_type" "pointer_type" "function_declaration" "type_conversion_expression" "_simple_type" "array_type" "func_literal" "type_case" "map_type" "type_arguments" "variadic_parameter_declaration" "function_type" "argument_list" "slice_type" "type_assertion_expression" "parameter_declaration" "type_spec" "var_spec" "implicit_length_array_type" "field_declaration" "method_spec" "type_alias" "method_declaration"))
   ("channel_type" ("const_spec" "parenthesized_type" "channel_type" "_type" "pointer_type" "function_declaration" "type_conversion_expression" "_simple_type" "array_type" "func_literal" "type_case" "map_type" "type_arguments" "variadic_parameter_declaration" "function_type" "argument_list" "slice_type" "type_assertion_expression" "parameter_declaration" "type_spec" "var_spec" "implicit_length_array_type" "field_declaration" "method_spec" "type_alias" "method_declaration"))
   ("slice_type" ("const_spec" "parenthesized_type" "channel_type" "_type" "pointer_type" "function_declaration" "type_conversion_expression" "_simple_type" "array_type" "func_literal" "type_case" "map_type" "type_arguments" "variadic_parameter_declaration" "function_type" "argument_list" "slice_type" "type_assertion_expression" "parameter_declaration" "type_spec" "var_spec" "implicit_length_array_type" "composite_literal" "field_declaration" "method_spec" "type_alias" "method_declaration"))
   ("qualified_type" ("const_spec" "parenthesized_type" "channel_type" "_type" "pointer_type" "function_declaration" "type_conversion_expression" "_simple_type" "array_type" "func_literal" "type_case" "generic_type" "map_type" "type_arguments" "variadic_parameter_declaration" "function_type" "argument_list" "slice_type" "type_assertion_expression" "parameter_declaration" "type_spec" "var_spec" "interface_type_name" "implicit_length_array_type" "composite_literal" "field_declaration" "method_spec" "type_alias" "method_declaration"))
   ("array_type" ("const_spec" "parenthesized_type" "channel_type" "_type" "pointer_type" "function_declaration" "type_conversion_expression" "_simple_type" "array_type" "func_literal" "type_case" "map_type" "type_arguments" "variadic_parameter_declaration" "function_type" "argument_list" "slice_type" "type_assertion_expression" "parameter_declaration" "type_spec" "var_spec" "implicit_length_array_type" "composite_literal" "field_declaration" "method_spec" "type_alias" "method_declaration"))
   ("interface_type" ("const_spec" "parenthesized_type" "channel_type" "_type" "pointer_type" "function_declaration" "type_conversion_expression" "_simple_type" "array_type" "func_literal" "type_case" "map_type" "type_arguments" "variadic_parameter_declaration" "function_type" "argument_list" "slice_type" "type_assertion_expression" "parameter_declaration" "type_spec" "var_spec" "implicit_length_array_type" "field_declaration" "method_spec" "type_alias" "method_declaration"))
   ("var_declaration" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("defer_statement" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("return_statement" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("expression_switch_statement" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("select_statement" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("goto_statement" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("empty_statement" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("break_statement" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("labeled_statement" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("block" ("if_statement" "type_case" "default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "function_declaration" "method_declaration" "for_statement" "func_literal"))
   ("type_declaration" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("fallthrough_statement" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("const_declaration" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("for_statement" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("if_statement" ("if_statement" "default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("continue_statement" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("go_statement" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("type_switch_statement" ("default_case" "expression_case" "communication_case" "source_file" "block" "labeled_statement" "_statement" "type_case"))
   ("parenthesized_type" ("const_spec" "parenthesized_type" "channel_type" "_type" "pointer_type" "type_conversion_expression" "array_type" "type_case" "map_type" "type_arguments" "variadic_parameter_declaration" "argument_list" "slice_type" "type_assertion_expression" "parameter_declaration" "type_spec" "var_spec" "implicit_length_array_type" "field_declaration" "type_alias"))
   ("variadic_argument" ("argument_list"))
   ("expression_list" ("return_statement" "const_spec" "short_var_declaration" "range_clause" "expression_case" "var_spec" "receive_statement" "type_switch_statement" "assignment_statement"))
   ("label_name" ("goto_statement" "labeled_statement" "continue_statement" "break_statement"))
   ("argument_list" ("call_expression"))
   ("type_arguments" ("generic_type" "call_expression"))
   ("receive_statement" ("communication_case"))
   ("literal_value" ("composite_literal" "literal_element"))
   ("implicit_length_array_type" ("composite_literal"))
   ("const_spec" ("const_declaration"))
   ("constraint_term" ("constraint_elem"))
   ("default_case" ("expression_switch_statement" "type_switch_statement" "select_statement"))
   ("expression_case" ("expression_switch_statement"))
   ("field_identifier" ("selector_expression" "field_declaration" "method_spec" "method_declaration"))
   ("field_declaration" ("field_declaration_list"))
   ("range_clause" ("for_statement"))
   ("for_clause" ("for_statement"))
   ("parameter_list" ("method_spec" "function_type" "function_declaration" "method_declaration" "func_literal"))
   ("type_parameter_list" ("function_declaration" "type_spec"))
   ("import_spec_list" ("import_declaration"))
   ("import_spec" ("import_spec_list" "import_declaration"))
   ("package_identifier" ("qualified_type" "import_spec" "package_clause"))
   ("blank_identifier" ("import_spec"))
   ("dot" ("import_spec"))
   ("struct_elem" ("interface_type"))
   ("constraint_elem" ("interface_type"))
   ("method_spec" ("interface_type"))
   ("interface_type_name" ("interface_type"))
   ("escape_sequence" ("interpreted_string_literal"))
   ("literal_element" ("keyed_element" "literal_value"))
   ("keyed_element" ("literal_value"))
   ("variadic_parameter_declaration" ("parameter_list"))
   ("parameter_declaration" ("type_parameter_list" "parameter_list"))
   ("communication_case" ("select_statement"))
   ("package_clause" ("source_file"))
   ("function_declaration" ("source_file"))
   ("import_declaration" ("source_file"))
   ("method_declaration" ("source_file"))
   ("struct_term" ("struct_elem"))
   ("field_declaration_list" ("struct_type"))
   ("type_spec" ("type_declaration"))
   ("type_alias" ("type_declaration"))
   ("type_case" ("type_switch_statement"))
   ("var_spec" ("var_declaration"))
  ) 
)
;; END production rules for go





;; START Auto-generated production rules for `python'
(defconst combobulate-rules-python 
 '(("_compound_statement" (:*unnamed* ("if_statement" "function_definition" "decorated_definition" "try_statement" "class_definition" "match_statement" "with_statement" "while_statement" "for_statement"))) 
 ("_simple_statement" (:*unnamed* ("pass_statement" "return_statement" "expression_statement" "continue_statement" "exec_statement" "global_statement" "delete_statement" "future_import_statement" "import_from_statement" "print_statement" "nonlocal_statement" "break_statement" "raise_statement" "import_statement" "assert_statement"))) 
 ("expression" (:*unnamed* ("lambda" "not_operator" "comparison_operator" "conditional_expression" "await" "boolean_operator" "as_pattern" "named_expression" "primary_expression"))) 
 ("parameter" (:*unnamed* ("default_parameter" "list_splat_pattern" "positional_separator" "keyword_separator" "tuple_pattern" "identifier" "typed_parameter" "typed_default_parameter" "dictionary_splat_pattern"))) 
 ("pattern" (:*unnamed* ("attribute" "identifier" "tuple_pattern" "list_splat_pattern" "subscript" "list_pattern"))) 
 ("primary_expression" (:*unnamed* ("concatenated_string" "unary_operator" "parenthesized_expression" "none" "tuple" "list_comprehension" "binary_operator" "identifier" "float" "false" "attribute" "dictionary" "generator_expression" "string" "dictionary_comprehension" "subscript" "true" "integer" "set" "set_comprehension" "ellipsis" "list" "call"))) 
 ("aliased_import" (:alias ("identifier") :name ("dotted_name"))) 
 ("argument_list" (:*unnamed* ("expression" "parenthesized_expression" "list_splat" "keyword_argument" "dictionary_splat"))) 
 ("as_pattern" (:*unnamed* ("expression") :alias ("as_pattern_target"))) 
 ("assert_statement" (:*unnamed* ("expression"))) 
 ("assignment" (:left ("pattern_list" "pattern") :right ("expression_list" "expression" "yield" "assignment" "augmented_assignment") :type ("type"))) 
 ("attribute" (:attribute ("identifier") :object ("primary_expression"))) 
 ("augmented_assignment" (:left ("pattern_list" "pattern") :operator nil :right ("expression_list" "expression" "yield" "assignment" "augmented_assignment"))) 
 ("await" (:*unnamed* ("expression"))) 
 ("binary_operator" (:left ("primary_expression") :operator nil :right ("primary_expression"))) 
 ("block" (:*unnamed* ("global_statement" "decorated_definition" "delete_statement" "import_from_statement" "with_statement" "print_statement" "raise_statement" "for_statement" "assert_statement" "pass_statement" "if_statement" "return_statement" "expression_statement" "continue_statement" "exec_statement" "function_definition" "future_import_statement" "try_statement" "class_definition" "match_statement" "nonlocal_statement" "break_statement" "while_statement" "import_statement"))) 
 ("boolean_operator" (:left ("expression") :operator nil :right ("expression"))) 
 ("call" (:arguments ("argument_list" "generator_expression") :function ("primary_expression"))) 
 ("case_clause" (:consequence ("block") :guard ("if_clause") :pattern ("case_pattern"))) 
 ("case_pattern" (:*unnamed* ("attribute" "subscript" "identifier"))) 
 ("chevron" (:*unnamed* ("expression"))) 
 ("class_definition" (:body ("block") :name ("identifier") :superclasses ("argument_list"))) 
 ("comparison_operator" (:*unnamed* ("primary_expression") :operators nil)) 
 ("concatenated_string" (:*unnamed* ("string"))) 
 ("conditional_expression" (:*unnamed* ("expression"))) 
 ("decorated_definition" (:*unnamed* ("decorator") :definition ("function_definition" "class_definition"))) 
 ("decorator" (:*unnamed* ("expression"))) 
 ("default_parameter" (:name ("identifier") :value ("expression"))) 
 ("delete_statement" (:*unnamed* ("expression_list" "expression"))) 
 ("dictionary" (:*unnamed* ("pair" "dictionary_splat"))) 
 ("dictionary_comprehension" (:*unnamed* ("if_clause" "for_in_clause") :body ("pair"))) 
 ("dictionary_splat" (:*unnamed* ("expression"))) 
 ("dictionary_splat_pattern" (:*unnamed* ("attribute" "subscript" "identifier"))) 
 ("dotted_name" (:*unnamed* ("identifier"))) 
 ("elif_clause" (:condition ("expression") :consequence ("block"))) 
 ("else_clause" (:body ("block"))) 
 ("except_clause" (:*unnamed* ("expression" "block"))) 
 ("except_group_clause" (:*unnamed* ("expression" "block"))) 
 ("exec_statement" (:*unnamed* ("expression") :code ("string"))) 
 ("expression_list" (:*unnamed* ("expression"))) 
 ("expression_statement" (:*unnamed* ("expression" "yield" "assignment" "augmented_assignment"))) 
 ("finally_clause" (:*unnamed* ("block"))) 
 ("for_in_clause" (:left ("pattern_list" "pattern") :right ("expression"))) 
 ("for_statement" (:alternative ("else_clause") :body ("block") :left ("pattern_list" "pattern") :right ("expression_list" "expression"))) 
 ("format_expression" (:expression ("expression_list" "expression" "yield") :format_specifier ("format_specifier") :type_conversion ("type_conversion"))) 
 ("format_specifier" (:*unnamed* ("format_expression"))) 
 ("function_definition" (:body ("block") :name ("identifier") :parameters ("parameters") :return_type ("type"))) 
 ("future_import_statement" (:name ("dotted_name" "aliased_import"))) 
 ("generator_expression" (:*unnamed* ("if_clause" "for_in_clause") :body ("expression"))) 
 ("global_statement" (:*unnamed* ("identifier"))) 
 ("if_clause" (:*unnamed* ("expression"))) 
 ("if_statement" (:alternative ("else_clause" "elif_clause") :condition ("expression") :consequence ("block"))) 
 ("import_from_statement" (:*unnamed* ("wildcard_import") :module_name ("dotted_name" "relative_import") :name ("dotted_name" "aliased_import"))) 
 ("import_statement" (:name ("dotted_name" "aliased_import"))) 
 ("interpolation" (:expression ("expression_list" "expression" "yield") :format_specifier ("format_specifier") :type_conversion ("type_conversion"))) 
 ("keyword_argument" (:name ("identifier") :value ("expression"))) 
 ("lambda" (:body ("expression") :parameters ("lambda_parameters"))) 
 ("lambda_parameters" (:*unnamed* ("parameter"))) 
 ("list" (:*unnamed* ("list_splat" "expression" "yield" "parenthesized_list_splat"))) 
 ("list_comprehension" (:*unnamed* ("if_clause" "for_in_clause") :body ("expression"))) 
 ("list_pattern" (:*unnamed* ("pattern"))) 
 ("list_splat" (:*unnamed* ("expression"))) 
 ("list_splat_pattern" (:*unnamed* ("attribute" "subscript" "identifier"))) 
 ("match_statement" (:alternative ("case_clause") :subject ("expression"))) 
 ("module" (:*unnamed* ("global_statement" "decorated_definition" "delete_statement" "import_from_statement" "with_statement" "print_statement" "raise_statement" "for_statement" "assert_statement" "pass_statement" "if_statement" "return_statement" "expression_statement" "continue_statement" "exec_statement" "function_definition" "future_import_statement" "try_statement" "class_definition" "match_statement" "nonlocal_statement" "break_statement" "while_statement" "import_statement"))) 
 ("named_expression" (:name ("identifier") :value ("expression"))) 
 ("nonlocal_statement" (:*unnamed* ("identifier"))) 
 ("not_operator" (:argument ("expression"))) 
 ("pair" (:key ("expression") :value ("expression"))) 
 ("parameters" (:*unnamed* ("parameter"))) 
 ("parenthesized_expression" (:*unnamed* ("list_splat" "expression" "yield" "parenthesized_expression"))) 
 ("parenthesized_list_splat" (:*unnamed* ("list_splat" "parenthesized_expression"))) 
 ("pattern_list" (:*unnamed* ("pattern"))) 
 ("print_statement" (:*unnamed* ("chevron") :argument ("expression"))) 
 ("raise_statement" (:*unnamed* ("expression_list" "expression") :cause ("expression"))) 
 ("relative_import" (:*unnamed* ("dotted_name" "import_prefix"))) 
 ("return_statement" (:*unnamed* ("expression_list" "expression"))) 
 ("set" (:*unnamed* ("list_splat" "expression" "yield" "parenthesized_list_splat"))) 
 ("set_comprehension" (:*unnamed* ("if_clause" "for_in_clause") :body ("expression"))) 
 ("slice" (:*unnamed* ("expression"))) 
 ("string" (:interpolation ("interpolation") :prefix nil :string_content ("string_content") :suffix nil)) 
 ("string_content" (:*unnamed* ("escape_sequence"))) 
 ("subscript" (:subscript ("expression" "slice") :value ("primary_expression"))) 
 ("try_statement" (:*unnamed* ("finally_clause" "else_clause" "except_clause" "except_group_clause") :body ("block"))) 
 ("tuple" (:*unnamed* ("list_splat" "expression" "yield" "parenthesized_list_splat"))) 
 ("tuple_pattern" (:*unnamed* ("pattern"))) 
 ("type" (:*unnamed* ("expression"))) 
 ("typed_default_parameter" (:name ("identifier") :type ("type") :value ("expression"))) 
 ("typed_parameter" (:*unnamed* ("list_splat_pattern" "identifier" "dictionary_splat_pattern") :type ("type"))) 
 ("unary_operator" (:argument ("primary_expression") :operator nil)) 
 ("while_statement" (:alternative ("else_clause") :body ("block") :condition ("expression"))) 
 ("with_clause" (:*unnamed* ("with_item"))) 
 ("with_item" (:value ("expression"))) 
 ("with_statement" (:*unnamed* ("with_clause") :body ("block"))) 
 ("yield" (:*unnamed* ("expression_list" "expression"))) 
))

(defconst combobulate-rules-python-inverted 
 '(("if_statement" ("_compound_statement" "block" "module"))
   ("function_definition" ("_compound_statement" "decorated_definition" "block" "module"))
   ("decorated_definition" ("_compound_statement" "block" "module"))
   ("try_statement" ("_compound_statement" "block" "module"))
   ("class_definition" ("_compound_statement" "decorated_definition" "block" "module"))
   ("match_statement" ("_compound_statement" "block" "module"))
   ("with_statement" ("_compound_statement" "block" "module"))
   ("while_statement" ("_compound_statement" "block" "module"))
   ("for_statement" ("_compound_statement" "block" "module"))
   ("pass_statement" ("_simple_statement" "block" "module"))
   ("return_statement" ("_simple_statement" "block" "module"))
   ("expression_statement" ("_simple_statement" "block" "module"))
   ("continue_statement" ("_simple_statement" "block" "module"))
   ("exec_statement" ("_simple_statement" "block" "module"))
   ("global_statement" ("_simple_statement" "block" "module"))
   ("delete_statement" ("_simple_statement" "block" "module"))
   ("future_import_statement" ("_simple_statement" "block" "module"))
   ("import_from_statement" ("_simple_statement" "block" "module"))
   ("print_statement" ("_simple_statement" "block" "module"))
   ("nonlocal_statement" ("_simple_statement" "block" "module"))
   ("break_statement" ("_simple_statement" "block" "module"))
   ("raise_statement" ("_simple_statement" "block" "module"))
   ("import_statement" ("_simple_statement" "block" "module"))
   ("assert_statement" ("_simple_statement" "block" "module"))
   ("lambda" ("expression"))
   ("not_operator" ("expression"))
   ("comparison_operator" ("expression"))
   ("conditional_expression" ("expression"))
   ("await" ("expression"))
   ("boolean_operator" ("expression"))
   ("as_pattern" ("expression"))
   ("named_expression" ("expression"))
   ("primary_expression" ("expression" "attribute" "comparison_operator" "unary_operator" "subscript" "binary_operator" "call"))
   ("default_parameter" ("parameter"))
   ("list_splat_pattern" ("pattern" "typed_parameter" "parameter"))
   ("positional_separator" ("parameter"))
   ("keyword_separator" ("parameter"))
   ("tuple_pattern" ("pattern" "parameter"))
   ("identifier" ("dotted_name" "attribute" "global_statement" "default_parameter" "case_pattern" "function_definition" "list_splat_pattern" "keyword_argument" "class_definition" "pattern" "nonlocal_statement" "aliased_import" "primary_expression" "parameter" "named_expression" "typed_parameter" "typed_default_parameter" "dictionary_splat_pattern"))
   ("typed_parameter" ("parameter"))
   ("typed_default_parameter" ("parameter"))
   ("dictionary_splat_pattern" ("typed_parameter" "parameter"))
   ("attribute" ("case_pattern" "list_splat_pattern" "pattern" "primary_expression" "dictionary_splat_pattern"))
   ("subscript" ("case_pattern" "list_splat_pattern" "pattern" "primary_expression" "dictionary_splat_pattern"))
   ("list_pattern" ("pattern"))
   ("concatenated_string" ("primary_expression"))
   ("unary_operator" ("primary_expression"))
   ("parenthesized_expression" ("argument_list" "parenthesized_list_splat" "primary_expression" "parenthesized_expression"))
   ("none" ("primary_expression"))
   ("tuple" ("primary_expression"))
   ("list_comprehension" ("primary_expression"))
   ("binary_operator" ("primary_expression"))
   ("float" ("primary_expression"))
   ("false" ("primary_expression"))
   ("dictionary" ("primary_expression"))
   ("generator_expression" ("call" "primary_expression"))
   ("string" ("concatenated_string" "exec_statement" "primary_expression"))
   ("dictionary_comprehension" ("primary_expression"))
   ("true" ("primary_expression"))
   ("integer" ("primary_expression"))
   ("set" ("primary_expression"))
   ("set_comprehension" ("primary_expression"))
   ("ellipsis" ("primary_expression"))
   ("list" ("primary_expression"))
   ("call" ("primary_expression"))
   ("dotted_name" ("future_import_statement" "import_from_statement" "aliased_import" "relative_import" "import_statement"))
   ("expression" ("lambda" "if_clause" "pair" "parenthesized_expression" "default_parameter" "delete_statement" "await" "boolean_operator" "list_comprehension" "tuple" "as_pattern" "for_in_clause" "decorator" "return_statement" "expression_statement" "not_operator" "with_item" "except_clause" "elif_clause" "expression_list" "match_statement" "named_expression" "interpolation" "set" "while_statement" "augmented_assignment" "print_statement" "argument_list" "list_splat" "raise_statement" "assignment" "slice" "for_statement" "dictionary_splat" "assert_statement" "if_statement" "typed_default_parameter" "exec_statement" "type" "generator_expression" "conditional_expression" "keyword_argument" "format_expression" "subscript" "set_comprehension" "except_group_clause" "list" "chevron" "yield"))
   ("list_splat" ("parenthesized_expression" "parenthesized_list_splat" "tuple" "set" "argument_list" "list"))
   ("keyword_argument" ("argument_list"))
   ("dictionary_splat" ("argument_list" "dictionary"))
   ("as_pattern_target" ("as_pattern"))
   ("pattern_list" ("for_in_clause" "assignment" "for_statement" "augmented_assignment"))
   ("pattern" ("pattern_list" "tuple_pattern" "augmented_assignment" "for_in_clause" "assignment" "for_statement" "list_pattern"))
   ("expression_list" ("return_statement" "delete_statement" "yield" "format_expression" "augmented_assignment" "interpolation" "raise_statement" "assignment" "for_statement"))
   ("yield" ("expression_statement" "parenthesized_expression" "tuple" "format_expression" "set" "interpolation" "list" "assignment" "augmented_assignment"))
   ("assignment" ("expression_statement" "assignment" "augmented_assignment"))
   ("augmented_assignment" ("expression_statement" "assignment" "augmented_assignment"))
   ("type" ("function_definition" "assignment" "typed_parameter" "typed_default_parameter"))
   ("argument_list" ("call" "class_definition"))
   ("block" ("if_statement" "case_clause" "function_definition" "else_clause" "except_clause" "class_definition" "elif_clause" "try_statement" "finally_clause" "with_statement" "except_group_clause" "while_statement" "for_statement"))
   ("if_clause" ("case_clause" "generator_expression" "dictionary_comprehension" "list_comprehension" "set_comprehension"))
   ("case_pattern" ("case_clause"))
   ("decorator" ("decorated_definition"))
   ("pair" ("dictionary_comprehension" "dictionary"))
   ("for_in_clause" ("set_comprehension" "generator_expression" "dictionary_comprehension" "list_comprehension"))
   ("else_clause" ("try_statement" "if_statement" "while_statement" "for_statement"))
   ("format_specifier" ("interpolation" "format_expression"))
   ("type_conversion" ("interpolation" "format_expression"))
   ("format_expression" ("format_specifier"))
   ("parameters" ("function_definition"))
   ("aliased_import" ("import_from_statement" "future_import_statement" "import_statement"))
   ("elif_clause" ("if_statement"))
   ("wildcard_import" ("import_from_statement"))
   ("relative_import" ("import_from_statement"))
   ("lambda_parameters" ("lambda"))
   ("parameter" ("parameters" "lambda_parameters"))
   ("parenthesized_list_splat" ("list" "set" "tuple"))
   ("case_clause" ("match_statement"))
   ("chevron" ("print_statement"))
   ("import_prefix" ("relative_import"))
   ("interpolation" ("string"))
   ("string_content" ("string"))
   ("escape_sequence" ("string_content"))
   ("slice" ("subscript"))
   ("finally_clause" ("try_statement"))
   ("except_clause" ("try_statement"))
   ("except_group_clause" ("try_statement"))
   ("with_item" ("with_clause"))
   ("with_clause" ("with_statement"))
  ) 
)
;; END production rules for python





;; START Auto-generated production rules for `c'
(defconst combobulate-rules-c 
 '(("_abstract_declarator" (:*unnamed* ("abstract_function_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "abstract_parenthesized_declarator"))) 
 ("_declarator" (:*unnamed* ("identifier" "function_declarator" "attributed_declarator" "pointer_declarator" "parenthesized_declarator" "array_declarator"))) 
 ("_expression" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true"))) 
 ("_field_declarator" (:*unnamed* ("function_declarator" "attributed_declarator" "pointer_declarator" "field_identifier" "parenthesized_declarator" "array_declarator"))) 
 ("_statement" (:*unnamed* ("return_statement" "if_statement" "expression_statement" "continue_statement" "switch_statement" "goto_statement" "compound_statement" "attributed_statement" "break_statement" "case_statement" "labeled_statement" "while_statement" "do_statement" "for_statement"))) 
 ("_type_declarator" (:*unnamed* ("type_identifier" "function_declarator" "attributed_declarator" "pointer_declarator" "parenthesized_declarator" "array_declarator"))) 
 ("_type_specifier" (:*unnamed* ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "sized_type_specifier" "macro_type_specifier"))) 
 ("abstract_array_declarator" (:*unnamed* ("type_qualifier") :declarator ("abstract_function_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "abstract_parenthesized_declarator") :size ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true"))) 
 ("abstract_function_declarator" (:declarator ("abstract_function_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "abstract_parenthesized_declarator") :parameters ("parameter_list"))) 
 ("abstract_parenthesized_declarator" (:*unnamed* ("abstract_function_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "abstract_parenthesized_declarator"))) 
 ("abstract_pointer_declarator" (:*unnamed* ("type_qualifier") :declarator ("abstract_function_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "abstract_parenthesized_declarator"))) 
 ("argument_list" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true" "preproc_defined"))) 
 ("array_declarator" (:*unnamed* ("type_qualifier") :declarator ("type_identifier" "attributed_declarator" "field_identifier" "function_declarator" "parenthesized_declarator" "array_declarator" "identifier" "pointer_declarator") :size ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true"))) 
 ("assignment_expression" (:left ("subscript_expression" "pointer_expression" "identifier" "call_expression" "parenthesized_expression" "field_expression") :operator nil :right ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true"))) 
 ("attribute" (:*unnamed* ("argument_list") :name ("identifier") :prefix ("identifier"))) 
 ("attribute_declaration" (:*unnamed* ("attribute"))) 
 ("attribute_specifier" (:*unnamed* ("argument_list"))) 
 ("attributed_declarator" (:*unnamed* ("type_identifier" "attributed_declarator" "field_identifier" "function_declarator" "parenthesized_declarator" "attribute_declaration" "array_declarator" "identifier" "pointer_declarator"))) 
 ("attributed_statement" (:*unnamed* ("return_statement" "if_statement" "expression_statement" "continue_statement" "switch_statement" "goto_statement" "attribute_declaration" "compound_statement" "attributed_statement" "break_statement" "case_statement" "labeled_statement" "while_statement" "do_statement" "for_statement"))) 
 ("binary_expression" (:left ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true" "preproc_defined") :operator nil :right ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true" "preproc_defined"))) 
 ("bitfield_clause" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true"))) 
 ("call_expression" (:arguments ("argument_list") :function ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true"))) 
 ("case_statement" (:*unnamed* ("return_statement" "if_statement" "expression_statement" "continue_statement" "switch_statement" "goto_statement" "type_definition" "declaration" "attributed_statement" "compound_statement" "break_statement" "labeled_statement" "while_statement" "do_statement" "for_statement") :value ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true"))) 
 ("cast_expression" (:type ("type_descriptor") :value ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true"))) 
 ("char_literal" (:*unnamed* ("escape_sequence"))) 
 ("comma_expression" (:left ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true") :right ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true" "comma_expression"))) 
 ("compound_literal_expression" (:type ("type_descriptor") :value ("initializer_list"))) 
 ("compound_statement" (:*unnamed* ("primitive_type" "struct_specifier" "type_identifier" "enum_specifier" "preproc_def" "sized_type_specifier" "compound_statement" "declaration" "preproc_include" "preproc_ifdef" "case_statement" "preproc_call" "do_statement" "for_statement" "return_statement" "if_statement" "expression_statement" "continue_statement" "switch_statement" "union_specifier" "linkage_specification" "preproc_function_def" "function_definition" "goto_statement" "type_definition" "macro_type_specifier" "attributed_statement" "break_statement" "labeled_statement" "while_statement" "preproc_if"))) 
 ("concatenated_string" (:*unnamed* ("string_literal"))) 
 ("conditional_expression" (:alternative ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true") :condition ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true") :consequence ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true"))) 
 ("declaration" (:*unnamed* ("attribute_specifier" "type_qualifier" "storage_class_specifier" "ms_declspec_modifier" "attribute_declaration") :declarator ("identifier" "function_declarator" "attributed_declarator" "pointer_declarator" "parenthesized_declarator" "init_declarator" "array_declarator") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "sized_type_specifier" "macro_type_specifier"))) 
 ("declaration_list" (:*unnamed* ("primitive_type" "struct_specifier" "type_identifier" "enum_specifier" "preproc_def" "sized_type_specifier" "compound_statement" "declaration" "preproc_include" "preproc_ifdef" "case_statement" "preproc_call" "do_statement" "for_statement" "return_statement" "if_statement" "expression_statement" "continue_statement" "switch_statement" "union_specifier" "linkage_specification" "preproc_function_def" "function_definition" "goto_statement" "type_definition" "macro_type_specifier" "attributed_statement" "break_statement" "labeled_statement" "while_statement" "preproc_if"))) 
 ("do_statement" (:body ("return_statement" "if_statement" "expression_statement" "continue_statement" "switch_statement" "goto_statement" "compound_statement" "attributed_statement" "break_statement" "case_statement" "labeled_statement" "while_statement" "do_statement" "for_statement") :condition ("parenthesized_expression"))) 
 ("enum_specifier" (:body ("enumerator_list") :name ("type_identifier"))) 
 ("enumerator" (:name ("identifier") :value ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true"))) 
 ("enumerator_list" (:*unnamed* ("enumerator"))) 
 ("expression_statement" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true" "comma_expression"))) 
 ("field_declaration" (:*unnamed* ("bitfield_clause" "attribute_specifier" "type_qualifier" "storage_class_specifier" "ms_declspec_modifier" "attribute_declaration") :declarator ("function_declarator" "attributed_declarator" "pointer_declarator" "field_identifier" "parenthesized_declarator" "array_declarator") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "sized_type_specifier" "macro_type_specifier"))) 
 ("field_declaration_list" (:*unnamed* ("field_declaration" "preproc_ifdef" "preproc_function_def" "preproc_def" "preproc_call" "preproc_if"))) 
 ("field_designator" (:*unnamed* ("field_identifier"))) 
 ("field_expression" (:argument ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true") :field ("field_identifier") :operator nil)) 
 ("for_statement" (:body ("return_statement" "if_statement" "expression_statement" "continue_statement" "switch_statement" "goto_statement" "compound_statement" "attributed_statement" "break_statement" "case_statement" "labeled_statement" "while_statement" "do_statement" "for_statement") :condition ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true" "comma_expression") :initializer ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "declaration" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true" "comma_expression") :update ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true" "comma_expression"))) 
 ("function_declarator" (:*unnamed* ("attribute_specifier") :declarator ("type_identifier" "attributed_declarator" "field_identifier" "function_declarator" "parenthesized_declarator" "array_declarator" "identifier" "pointer_declarator") :parameters ("parameter_list"))) 
 ("function_definition" (:*unnamed* ("attribute_specifier" "type_qualifier" "storage_class_specifier" "ms_call_modifier" "ms_declspec_modifier" "attribute_declaration") :body ("compound_statement") :declarator ("identifier" "function_declarator" "attributed_declarator" "pointer_declarator" "parenthesized_declarator" "array_declarator") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "sized_type_specifier" "macro_type_specifier"))) 
 ("goto_statement" (:label ("statement_identifier"))) 
 ("if_statement" (:alternative ("return_statement" "if_statement" "expression_statement" "continue_statement" "switch_statement" "goto_statement" "compound_statement" "attributed_statement" "break_statement" "case_statement" "labeled_statement" "while_statement" "do_statement" "for_statement") :condition ("parenthesized_expression") :consequence ("return_statement" "if_statement" "expression_statement" "continue_statement" "switch_statement" "goto_statement" "compound_statement" "attributed_statement" "break_statement" "case_statement" "labeled_statement" "while_statement" "do_statement" "for_statement"))) 
 ("init_declarator" (:declarator ("identifier" "function_declarator" "attributed_declarator" "pointer_declarator" "parenthesized_declarator" "array_declarator") :value ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "initializer_list" "conditional_expression" "field_expression" "true"))) 
 ("initializer_list" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "initializer_list" "conditional_expression" "field_expression" "initializer_pair" "true"))) 
 ("initializer_pair" (:designator ("subscript_designator" "field_designator") :value ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "initializer_list" "conditional_expression" "field_expression" "true"))) 
 ("labeled_statement" (:*unnamed* ("return_statement" "if_statement" "expression_statement" "continue_statement" "switch_statement" "goto_statement" "compound_statement" "attributed_statement" "break_statement" "case_statement" "labeled_statement" "while_statement" "do_statement" "for_statement") :label ("statement_identifier"))) 
 ("linkage_specification" (:body ("function_definition" "declaration_list" "declaration") :value ("string_literal"))) 
 ("macro_type_specifier" (:name ("identifier") :type ("type_descriptor"))) 
 ("ms_based_modifier" (:*unnamed* ("argument_list"))) 
 ("ms_declspec_modifier" (:*unnamed* ("identifier"))) 
 ("ms_pointer_modifier" (:*unnamed* ("ms_unaligned_ptr_modifier" "ms_signed_ptr_modifier" "ms_unsigned_ptr_modifier" "ms_restrict_modifier"))) 
 ("parameter_declaration" (:*unnamed* ("attribute_specifier" "type_qualifier" "storage_class_specifier" "ms_declspec_modifier" "attribute_declaration") :declarator ("abstract_parenthesized_declarator" "attributed_declarator" "function_declarator" "parenthesized_declarator" "array_declarator" "abstract_function_declarator" "identifier" "pointer_declarator" "abstract_array_declarator" "abstract_pointer_declarator") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "sized_type_specifier" "macro_type_specifier"))) 
 ("parameter_list" (:*unnamed* ("variadic_parameter" "parameter_declaration"))) 
 ("parenthesized_declarator" (:*unnamed* ("type_identifier" "attributed_declarator" "field_identifier" "function_declarator" "parenthesized_declarator" "array_declarator" "identifier" "pointer_declarator"))) 
 ("parenthesized_expression" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true" "comma_expression" "preproc_defined"))) 
 ("pointer_declarator" (:*unnamed* ("ms_based_modifier" "ms_pointer_modifier" "type_qualifier") :declarator ("type_identifier" "attributed_declarator" "field_identifier" "function_declarator" "parenthesized_declarator" "array_declarator" "identifier" "pointer_declarator"))) 
 ("pointer_expression" (:argument ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true") :operator nil)) 
 ("preproc_call" (:argument ("preproc_arg") :directive ("preproc_directive"))) 
 ("preproc_def" (:name ("identifier") :value ("preproc_arg"))) 
 ("preproc_defined" (:*unnamed* ("identifier"))) 
 ("preproc_elif" (:*unnamed* ("type_identifier" "enum_specifier" "sized_type_specifier" "compound_statement" "declaration" "preproc_ifdef" "case_statement" "preproc_call" "do_statement" "return_statement" "union_specifier" "expression_statement" "goto_statement" "macro_type_specifier" "break_statement" "labeled_statement" "while_statement" "preproc_if" "primitive_type" "struct_specifier" "preproc_def" "preproc_include" "for_statement" "switch_statement" "if_statement" "linkage_specification" "continue_statement" "preproc_function_def" "function_definition" "type_definition" "attributed_statement" "field_declaration") :alternative ("preproc_elif" "preproc_else") :condition ("unary_expression" "call_expression" "parenthesized_expression" "char_literal" "identifier" "binary_expression" "number_literal" "preproc_defined"))) 
 ("preproc_else" (:*unnamed* ("type_identifier" "enum_specifier" "sized_type_specifier" "compound_statement" "declaration" "preproc_ifdef" "case_statement" "preproc_call" "do_statement" "return_statement" "union_specifier" "expression_statement" "goto_statement" "macro_type_specifier" "break_statement" "labeled_statement" "while_statement" "preproc_if" "primitive_type" "struct_specifier" "preproc_def" "preproc_include" "for_statement" "switch_statement" "if_statement" "linkage_specification" "continue_statement" "preproc_function_def" "function_definition" "type_definition" "attributed_statement" "field_declaration"))) 
 ("preproc_function_def" (:name ("identifier") :parameters ("preproc_params") :value ("preproc_arg"))) 
 ("preproc_if" (:*unnamed* ("type_identifier" "enum_specifier" "sized_type_specifier" "compound_statement" "declaration" "preproc_ifdef" "case_statement" "preproc_call" "do_statement" "return_statement" "union_specifier" "expression_statement" "goto_statement" "macro_type_specifier" "break_statement" "labeled_statement" "while_statement" "preproc_if" "primitive_type" "struct_specifier" "preproc_def" "preproc_include" "for_statement" "switch_statement" "if_statement" "linkage_specification" "continue_statement" "preproc_function_def" "function_definition" "type_definition" "attributed_statement" "field_declaration") :alternative ("preproc_elif" "preproc_else") :condition ("unary_expression" "call_expression" "parenthesized_expression" "char_literal" "identifier" "binary_expression" "number_literal" "preproc_defined"))) 
 ("preproc_ifdef" (:*unnamed* ("type_identifier" "enum_specifier" "sized_type_specifier" "compound_statement" "declaration" "preproc_ifdef" "case_statement" "preproc_call" "do_statement" "return_statement" "union_specifier" "expression_statement" "goto_statement" "macro_type_specifier" "break_statement" "labeled_statement" "while_statement" "preproc_if" "primitive_type" "struct_specifier" "preproc_def" "preproc_include" "for_statement" "switch_statement" "if_statement" "linkage_specification" "continue_statement" "preproc_function_def" "function_definition" "type_definition" "attributed_statement" "field_declaration") :alternative ("preproc_elif" "preproc_else") :name ("identifier"))) 
 ("preproc_include" (:path ("string_literal" "identifier" "call_expression" "system_lib_string"))) 
 ("preproc_params" (:*unnamed* ("identifier"))) 
 ("return_statement" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true" "comma_expression"))) 
 ("sized_type_specifier" (:type ("primitive_type" "type_identifier"))) 
 ("sizeof_expression" (:type ("type_descriptor") :value ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true"))) 
 ("string_literal" (:*unnamed* ("escape_sequence"))) 
 ("struct_specifier" (:*unnamed* ("ms_declspec_modifier") :body ("field_declaration_list") :name ("type_identifier"))) 
 ("subscript_designator" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true"))) 
 ("subscript_expression" (:argument ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true") :index ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true"))) 
 ("switch_statement" (:body ("compound_statement") :condition ("parenthesized_expression"))) 
 ("translation_unit" (:*unnamed* ("primitive_type" "struct_specifier" "type_identifier" "enum_specifier" "preproc_def" "sized_type_specifier" "compound_statement" "declaration" "preproc_include" "preproc_ifdef" "case_statement" "preproc_call" "do_statement" "for_statement" "return_statement" "if_statement" "expression_statement" "continue_statement" "switch_statement" "union_specifier" "linkage_specification" "preproc_function_def" "function_definition" "goto_statement" "type_definition" "macro_type_specifier" "attributed_statement" "break_statement" "labeled_statement" "while_statement" "preproc_if"))) 
 ("type_definition" (:*unnamed* ("type_qualifier") :declarator ("type_identifier" "function_declarator" "attributed_declarator" "pointer_declarator" "parenthesized_declarator" "array_declarator") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "sized_type_specifier" "macro_type_specifier"))) 
 ("type_descriptor" (:*unnamed* ("type_qualifier") :declarator ("abstract_function_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "abstract_parenthesized_declarator") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "sized_type_specifier" "macro_type_specifier"))) 
 ("unary_expression" (:argument ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true" "preproc_defined") :operator nil)) 
 ("union_specifier" (:*unnamed* ("ms_declspec_modifier") :body ("field_declaration_list") :name ("type_identifier"))) 
 ("update_expression" (:argument ("assignment_expression" "concatenated_string" "compound_literal_expression" "sizeof_expression" "parenthesized_expression" "null" "subscript_expression" "update_expression" "cast_expression" "identifier" "binary_expression" "number_literal" "unary_expression" "false" "pointer_expression" "call_expression" "char_literal" "string_literal" "conditional_expression" "field_expression" "true") :operator nil)) 
 ("while_statement" (:body ("return_statement" "if_statement" "expression_statement" "continue_statement" "switch_statement" "goto_statement" "compound_statement" "attributed_statement" "break_statement" "case_statement" "labeled_statement" "while_statement" "do_statement" "for_statement") :condition ("parenthesized_expression"))) 
))

(defconst combobulate-rules-c-inverted 
 '(("abstract_function_declarator" ("parameter_declaration" "abstract_parenthesized_declarator" "_abstract_declarator" "abstract_function_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "type_descriptor"))
   ("abstract_array_declarator" ("parameter_declaration" "abstract_parenthesized_declarator" "_abstract_declarator" "abstract_function_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "type_descriptor"))
   ("abstract_pointer_declarator" ("parameter_declaration" "abstract_parenthesized_declarator" "_abstract_declarator" "abstract_function_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "type_descriptor"))
   ("abstract_parenthesized_declarator" ("parameter_declaration" "abstract_parenthesized_declarator" "_abstract_declarator" "abstract_function_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "type_descriptor"))
   ("identifier" ("assignment_expression" "parenthesized_expression" "ms_declspec_modifier" "enumerator" "declaration" "subscript_designator" "subscript_expression" "cast_expression" "preproc_ifdef" "case_statement" "preproc_params" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "attribute" "parenthesized_declarator" "macro_type_specifier" "initializer_pair" "preproc_if" "sizeof_expression" "_declarator" "preproc_def" "array_declarator" "preproc_include" "preproc_elif" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "parameter_declaration" "call_expression" "attributed_declarator" "function_definition" "preproc_function_def" "function_declarator" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "pointer_declarator" "init_declarator" "preproc_defined"))
   ("function_declarator" ("parameter_declaration" "_field_declarator" "attributed_declarator" "_declarator" "function_declarator" "function_definition" "parenthesized_declarator" "type_definition" "array_declarator" "declaration" "field_declaration" "pointer_declarator" "init_declarator" "_type_declarator"))
   ("attributed_declarator" ("parameter_declaration" "_field_declarator" "attributed_declarator" "_declarator" "function_declarator" "function_definition" "parenthesized_declarator" "type_definition" "array_declarator" "declaration" "field_declaration" "pointer_declarator" "init_declarator" "_type_declarator"))
   ("pointer_declarator" ("parameter_declaration" "_field_declarator" "attributed_declarator" "_declarator" "function_declarator" "function_definition" "parenthesized_declarator" "type_definition" "array_declarator" "declaration" "field_declaration" "pointer_declarator" "init_declarator" "_type_declarator"))
   ("parenthesized_declarator" ("parameter_declaration" "_field_declarator" "attributed_declarator" "_declarator" "function_declarator" "function_definition" "parenthesized_declarator" "type_definition" "array_declarator" "declaration" "field_declaration" "pointer_declarator" "init_declarator" "_type_declarator"))
   ("array_declarator" ("parameter_declaration" "_field_declarator" "attributed_declarator" "_declarator" "function_declarator" "function_definition" "parenthesized_declarator" "type_definition" "array_declarator" "declaration" "field_declaration" "pointer_declarator" "init_declarator" "_type_declarator"))
   ("assignment_expression" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "sizeof_expression" "array_declarator" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("concatenated_string" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "sizeof_expression" "array_declarator" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("compound_literal_expression" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "sizeof_expression" "array_declarator" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("sizeof_expression" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "sizeof_expression" "array_declarator" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("parenthesized_expression" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "do_statement" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "while_statement" "preproc_if" "sizeof_expression" "array_declarator" "preproc_elif" "update_expression" "argument_list" "for_statement" "switch_statement" "if_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("null" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "sizeof_expression" "array_declarator" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("subscript_expression" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "sizeof_expression" "array_declarator" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("update_expression" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "sizeof_expression" "array_declarator" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("cast_expression" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "sizeof_expression" "array_declarator" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("binary_expression" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "preproc_if" "sizeof_expression" "array_declarator" "preproc_elif" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("number_literal" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "preproc_if" "sizeof_expression" "array_declarator" "preproc_elif" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("unary_expression" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "preproc_if" "sizeof_expression" "array_declarator" "preproc_elif" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("false" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "sizeof_expression" "array_declarator" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("pointer_expression" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "sizeof_expression" "array_declarator" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("call_expression" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "preproc_if" "sizeof_expression" "array_declarator" "preproc_include" "preproc_elif" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("char_literal" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "preproc_if" "sizeof_expression" "array_declarator" "preproc_elif" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("string_literal" ("assignment_expression" "concatenated_string" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "sizeof_expression" "array_declarator" "preproc_include" "update_expression" "argument_list" "for_statement" "_expression" "linkage_specification" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("conditional_expression" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "sizeof_expression" "array_declarator" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("field_expression" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "sizeof_expression" "array_declarator" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("true" ("assignment_expression" "parenthesized_expression" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "case_statement" "binary_expression" "abstract_array_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "initializer_pair" "sizeof_expression" "array_declarator" "update_expression" "argument_list" "for_statement" "_expression" "pointer_expression" "call_expression" "initializer_list" "conditional_expression" "field_expression" "comma_expression" "init_declarator"))
   ("field_identifier" ("attributed_declarator" "_field_declarator" "function_declarator" "parenthesized_declarator" "array_declarator" "field_expression" "field_declaration" "pointer_declarator" "field_designator"))
   ("return_statement" ("if_statement" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("if_statement" ("if_statement" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("expression_statement" ("if_statement" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("continue_statement" ("if_statement" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("switch_statement" ("if_statement" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("goto_statement" ("if_statement" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("compound_statement" ("switch_statement" "if_statement" "declaration_list" "preproc_else" "translation_unit" "function_definition" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("attributed_statement" ("if_statement" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("break_statement" ("if_statement" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("case_statement" ("if_statement" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "preproc_ifdef" "_statement" "while_statement" "do_statement" "for_statement"))
   ("labeled_statement" ("if_statement" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("while_statement" ("if_statement" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("do_statement" ("if_statement" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("for_statement" ("if_statement" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("type_identifier" ("declaration_list" "enum_specifier" "preproc_else" "sized_type_specifier" "compound_statement" "declaration" "preproc_ifdef" "type_descriptor" "_type_declarator" "union_specifier" "translation_unit" "parenthesized_declarator" "preproc_if" "struct_specifier" "array_declarator" "preproc_elif" "parameter_declaration" "attributed_declarator" "function_definition" "type_definition" "function_declarator" "field_declaration" "_type_specifier" "pointer_declarator"))
   ("primitive_type" ("declaration_list" "parameter_declaration" "preproc_else" "translation_unit" "function_definition" "type_definition" "sized_type_specifier" "declaration" "compound_statement" "field_declaration" "preproc_elif" "_type_specifier" "preproc_ifdef" "type_descriptor" "preproc_if"))
   ("struct_specifier" ("declaration_list" "parameter_declaration" "preproc_else" "translation_unit" "function_definition" "type_definition" "declaration" "compound_statement" "field_declaration" "preproc_elif" "_type_specifier" "preproc_ifdef" "type_descriptor" "preproc_if"))
   ("union_specifier" ("declaration_list" "parameter_declaration" "preproc_else" "translation_unit" "function_definition" "type_definition" "declaration" "compound_statement" "field_declaration" "preproc_elif" "_type_specifier" "preproc_ifdef" "type_descriptor" "preproc_if"))
   ("enum_specifier" ("declaration_list" "parameter_declaration" "preproc_else" "translation_unit" "function_definition" "type_definition" "declaration" "compound_statement" "field_declaration" "preproc_elif" "_type_specifier" "preproc_ifdef" "type_descriptor" "preproc_if"))
   ("sized_type_specifier" ("declaration_list" "parameter_declaration" "preproc_else" "translation_unit" "function_definition" "type_definition" "declaration" "compound_statement" "field_declaration" "preproc_elif" "_type_specifier" "preproc_ifdef" "type_descriptor" "preproc_if"))
   ("macro_type_specifier" ("declaration_list" "parameter_declaration" "preproc_else" "translation_unit" "function_definition" "type_definition" "declaration" "compound_statement" "field_declaration" "preproc_elif" "_type_specifier" "preproc_ifdef" "type_descriptor" "preproc_if"))
   ("type_qualifier" ("parameter_declaration" "function_definition" "type_definition" "declaration" "array_declarator" "field_declaration" "pointer_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "type_descriptor"))
   ("parameter_list" ("abstract_function_declarator" "function_declarator"))
   ("preproc_defined" ("unary_expression" "parenthesized_expression" "preproc_elif" "argument_list" "binary_expression" "preproc_if"))
   ("argument_list" ("ms_based_modifier" "attribute_specifier" "attribute" "call_expression"))
   ("attribute" ("attribute_declaration"))
   ("attribute_declaration" ("parameter_declaration" "attributed_declarator" "function_definition" "declaration" "attributed_statement" "field_declaration"))
   ("type_definition" ("declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "case_statement" "preproc_if"))
   ("declaration" ("linkage_specification" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_if" "preproc_elif" "preproc_ifdef" "case_statement" "for_statement"))
   ("type_descriptor" ("sizeof_expression" "cast_expression" "compound_literal_expression" "macro_type_specifier"))
   ("escape_sequence" ("char_literal" "string_literal"))
   ("comma_expression" ("return_statement" "expression_statement" "parenthesized_expression" "comma_expression" "for_statement"))
   ("initializer_list" ("initializer_pair" "initializer_list" "init_declarator" "compound_literal_expression"))
   ("preproc_def" ("field_declaration_list" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_include" ("declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_ifdef" ("field_declaration_list" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_call" ("field_declaration_list" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("linkage_specification" ("declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_function_def" ("field_declaration_list" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("function_definition" ("linkage_specification" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_if" ("field_declaration_list" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("attribute_specifier" ("parameter_declaration" "function_definition" "function_declarator" "declaration" "field_declaration"))
   ("storage_class_specifier" ("function_definition" "field_declaration" "parameter_declaration" "declaration"))
   ("ms_declspec_modifier" ("struct_specifier" "union_specifier" "parameter_declaration" "function_definition" "declaration" "field_declaration"))
   ("init_declarator" ("declaration"))
   ("enumerator_list" ("enum_specifier"))
   ("enumerator" ("enumerator_list"))
   ("bitfield_clause" ("field_declaration"))
   ("field_declaration" ("field_declaration_list" "preproc_else" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("ms_call_modifier" ("function_definition"))
   ("statement_identifier" ("goto_statement" "labeled_statement"))
   ("initializer_pair" ("initializer_list"))
   ("subscript_designator" ("initializer_pair"))
   ("field_designator" ("initializer_pair"))
   ("declaration_list" ("linkage_specification"))
   ("ms_unaligned_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_signed_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_unsigned_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_restrict_modifier" ("ms_pointer_modifier"))
   ("variadic_parameter" ("parameter_list"))
   ("parameter_declaration" ("parameter_list"))
   ("ms_based_modifier" ("pointer_declarator"))
   ("ms_pointer_modifier" ("pointer_declarator"))
   ("preproc_arg" ("preproc_def" "preproc_call" "preproc_function_def"))
   ("preproc_directive" ("preproc_call"))
   ("preproc_elif" ("preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_else" ("preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_params" ("preproc_function_def"))
   ("system_lib_string" ("preproc_include"))
   ("field_declaration_list" ("struct_specifier" "union_specifier"))
  ) 
)
;; END production rules for c





;; START Auto-generated production rules for `cpp'
(defconst combobulate-rules-cpp 
 '(("_abstract_declarator" (:*unnamed* ("abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_reference_declarator" "abstract_pointer_declarator"))) 
 ("_declarator" (:*unnamed* ("destructor_name" "reference_declarator" "attributed_declarator" "function_declarator" "parenthesized_declarator" "structured_binding_declarator" "array_declarator" "qualified_identifier" "identifier" "operator_name" "pointer_declarator" "template_function"))) 
 ("_expression" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("_field_declarator" (:*unnamed* ("reference_declarator" "attributed_declarator" "field_identifier" "function_declarator" "parenthesized_declarator" "array_declarator" "operator_name" "template_method" "pointer_declarator"))) 
 ("_statement" (:*unnamed* ("throw_statement" "co_return_statement" "co_yield_statement" "compound_statement" "case_statement" "do_statement" "for_statement" "return_statement" "switch_statement" "expression_statement" "if_statement" "continue_statement" "for_range_loop" "goto_statement" "try_statement" "attributed_statement" "break_statement" "labeled_statement" "while_statement"))) 
 ("_type_declarator" (:*unnamed* ("type_identifier" "function_declarator" "attributed_declarator" "pointer_declarator" "parenthesized_declarator" "array_declarator"))) 
 ("_type_specifier" (:*unnamed* ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype"))) 
 ("abstract_array_declarator" (:*unnamed* ("type_qualifier") :declarator ("abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_reference_declarator" "abstract_pointer_declarator") :size ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("abstract_function_declarator" (:*unnamed* ("virtual_specifier" "attribute_specifier" "throw_specifier" "type_qualifier" "noexcept" "attribute_declaration" "trailing_return_type" "requires_clause" "ref_qualifier") :declarator ("abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_reference_declarator" "abstract_pointer_declarator") :parameters ("parameter_list"))) 
 ("abstract_parenthesized_declarator" (:*unnamed* ("abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_reference_declarator" "abstract_pointer_declarator"))) 
 ("abstract_pointer_declarator" (:*unnamed* ("type_qualifier") :declarator ("abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_reference_declarator" "abstract_pointer_declarator"))) 
 ("abstract_reference_declarator" (:*unnamed* ("abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_reference_declarator" "abstract_pointer_declarator"))) 
 ("alias_declaration" (:*unnamed* ("attribute_declaration") :name ("type_identifier") :type ("type_descriptor"))) 
 ("argument_list" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "initializer_list" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression" "preproc_defined"))) 
 ("array_declarator" (:*unnamed* ("type_qualifier") :declarator ("destructor_name" "reference_declarator" "type_identifier" "attributed_declarator" "field_identifier" "function_declarator" "parenthesized_declarator" "structured_binding_declarator" "array_declarator" "qualified_identifier" "identifier" "operator_name" "template_method" "pointer_declarator" "template_function") :size ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("assignment_expression" (:left ("subscript_expression" "pointer_expression" "identifier" "call_expression" "parenthesized_expression" "qualified_identifier" "field_expression") :operator nil :right ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("attribute" (:*unnamed* ("argument_list") :name ("identifier") :prefix ("identifier"))) 
 ("attribute_declaration" (:*unnamed* ("attribute"))) 
 ("attribute_specifier" (:*unnamed* ("argument_list"))) 
 ("attributed_declarator" (:*unnamed* ("destructor_name" "type_identifier" "field_identifier" "array_declarator" "qualified_identifier" "identifier" "template_method" "reference_declarator" "attributed_declarator" "function_declarator" "parenthesized_declarator" "structured_binding_declarator" "attribute_declaration" "operator_name" "pointer_declarator" "template_function"))) 
 ("attributed_statement" (:*unnamed* ("throw_statement" "co_return_statement" "co_yield_statement" "compound_statement" "case_statement" "do_statement" "for_statement" "return_statement" "switch_statement" "expression_statement" "if_statement" "continue_statement" "for_range_loop" "goto_statement" "try_statement" "attribute_declaration" "attributed_statement" "break_statement" "labeled_statement" "while_statement"))) 
 ("base_class_clause" (:*unnamed* ("virtual" "type_identifier" "template_type" "access_specifier" "attribute_declaration" "qualified_identifier"))) 
 ("binary_expression" (:left ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression" "preproc_defined") :operator nil :right ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression" "preproc_defined"))) 
 ("bitfield_clause" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("call_expression" (:arguments ("argument_list") :function ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "primitive_type" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("case_statement" (:*unnamed* ("throw_statement" "co_return_statement" "co_yield_statement" "compound_statement" "declaration" "do_statement" "for_statement" "return_statement" "switch_statement" "expression_statement" "if_statement" "continue_statement" "for_range_loop" "goto_statement" "type_definition" "try_statement" "attributed_statement" "break_statement" "labeled_statement" "while_statement") :value ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("cast_expression" (:type ("type_descriptor") :value ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("catch_clause" (:body ("compound_statement") :parameters ("parameter_list"))) 
 ("char_literal" (:*unnamed* ("escape_sequence"))) 
 ("class_specifier" (:*unnamed* ("base_class_clause" "ms_declspec_modifier" "virtual_specifier" "attribute_declaration") :body ("field_declaration_list") :name ("template_type" "type_identifier" "qualified_identifier"))) 
 ("co_await_expression" (:argument ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :operator nil)) 
 ("co_return_statement" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("co_yield_statement" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("comma_expression" (:left ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :right ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "comma_expression" "co_await_expression"))) 
 ("compound_literal_expression" (:type ("template_type" "type_descriptor" "type_identifier" "qualified_identifier") :value ("initializer_list"))) 
 ("compound_requirement" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "trailing_return_type" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("compound_statement" (:*unnamed* ("type_identifier" "enum_specifier" "sized_type_specifier" "co_yield_statement" "qualified_identifier" "compound_statement" "declaration" "template_instantiation" "preproc_ifdef" "case_statement" "preproc_call" "do_statement" "return_statement" "union_specifier" "expression_statement" "dependent_type" "goto_statement" "class_specifier" "try_statement" "break_statement" "labeled_statement" "while_statement" "namespace_alias_definition" "preproc_if" "primitive_type" "throw_statement" "struct_specifier" "co_return_statement" "template_type" "preproc_def" "preproc_include" "placeholder_type_specifier" "template_declaration" "static_assert_declaration" "concept_definition" "for_statement" "switch_statement" "if_statement" "linkage_specification" "continue_statement" "using_declaration" "for_range_loop" "preproc_function_def" "function_definition" "type_definition" "attributed_statement" "namespace_definition" "alias_declaration" "decltype"))) 
 ("concatenated_string" (:*unnamed* ("string_literal" "raw_string_literal"))) 
 ("concept_definition" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :name ("identifier"))) 
 ("condition_clause" (:initializer ("init_statement") :value ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "declaration" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "comma_expression" "co_await_expression"))) 
 ("conditional_expression" (:alternative ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :condition ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :consequence ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("constraint_conjunction" (:left ("assignment_expression" "concatenated_string" "type_identifier" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "template_type" "constraint_disjunction" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "constraint_conjunction" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :operator nil :right ("assignment_expression" "concatenated_string" "type_identifier" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "template_type" "constraint_disjunction" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "constraint_conjunction" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("constraint_disjunction" (:left ("assignment_expression" "concatenated_string" "type_identifier" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "template_type" "constraint_disjunction" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "constraint_conjunction" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :operator nil :right ("assignment_expression" "concatenated_string" "type_identifier" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "template_type" "constraint_disjunction" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "constraint_conjunction" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("declaration" (:*unnamed* ("attribute_specifier" "virtual" "type_qualifier" "storage_class_specifier" "explicit_function_specifier" "ms_declspec_modifier" "attribute_declaration") :declarator ("destructor_name" "reference_declarator" "operator_cast" "attributed_declarator" "function_declarator" "parenthesized_declarator" "structured_binding_declarator" "array_declarator" "qualified_identifier" "identifier" "operator_name" "pointer_declarator" "init_declarator" "template_function") :default_value ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype") :value ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "initializer_list" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("declaration_list" (:*unnamed* ("type_identifier" "enum_specifier" "sized_type_specifier" "co_yield_statement" "qualified_identifier" "compound_statement" "declaration" "template_instantiation" "preproc_ifdef" "case_statement" "preproc_call" "do_statement" "return_statement" "union_specifier" "expression_statement" "dependent_type" "goto_statement" "class_specifier" "try_statement" "break_statement" "labeled_statement" "while_statement" "namespace_alias_definition" "preproc_if" "primitive_type" "throw_statement" "struct_specifier" "co_return_statement" "template_type" "preproc_def" "preproc_include" "placeholder_type_specifier" "template_declaration" "static_assert_declaration" "concept_definition" "for_statement" "switch_statement" "if_statement" "linkage_specification" "continue_statement" "using_declaration" "for_range_loop" "preproc_function_def" "function_definition" "type_definition" "attributed_statement" "namespace_definition" "alias_declaration" "decltype"))) 
 ("decltype" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "auto" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("delete_expression" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("dependent_name" (:*unnamed* ("template_type" "template_function" "template_method"))) 
 ("dependent_type" (:*unnamed* ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype"))) 
 ("destructor_name" (:*unnamed* ("identifier"))) 
 ("do_statement" (:body ("throw_statement" "co_return_statement" "co_yield_statement" "compound_statement" "case_statement" "do_statement" "for_statement" "return_statement" "switch_statement" "expression_statement" "if_statement" "continue_statement" "for_range_loop" "goto_statement" "try_statement" "attributed_statement" "break_statement" "labeled_statement" "while_statement") :condition ("parenthesized_expression"))) 
 ("enum_specifier" (:base ("sized_type_specifier" "type_identifier" "qualified_identifier") :body ("enumerator_list") :name ("template_type" "type_identifier" "qualified_identifier"))) 
 ("enumerator" (:name ("identifier") :value ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("enumerator_list" (:*unnamed* ("enumerator"))) 
 ("explicit_function_specifier" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("expression_statement" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "comma_expression" "co_await_expression"))) 
 ("field_declaration" (:*unnamed* ("bitfield_clause" "attribute_specifier" "virtual" "type_qualifier" "storage_class_specifier" "ms_declspec_modifier" "attribute_declaration") :declarator ("reference_declarator" "attributed_declarator" "field_identifier" "function_declarator" "parenthesized_declarator" "array_declarator" "operator_name" "template_method" "pointer_declarator") :default_value ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "initializer_list" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype"))) 
 ("field_declaration_list" (:*unnamed* ("using_declaration" "preproc_function_def" "function_definition" "preproc_def" "friend_declaration" "type_definition" "declaration" "field_declaration" "alias_declaration" "preproc_ifdef" "template_declaration" "preproc_call" "static_assert_declaration" "access_specifier" "preproc_if"))) 
 ("field_designator" (:*unnamed* ("field_identifier"))) 
 ("field_expression" (:argument ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :field ("destructor_name" "dependent_name" "field_identifier" "template_method") :operator nil)) 
 ("field_initializer" (:*unnamed* ("template_method" "argument_list" "field_identifier" "initializer_list" "qualified_identifier"))) 
 ("field_initializer_list" (:*unnamed* ("field_initializer"))) 
 ("fold_expression" (:left ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :operator nil :right ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("for_range_loop" (:*unnamed* ("attribute_specifier" "virtual" "type_qualifier" "storage_class_specifier" "ms_declspec_modifier" "attribute_declaration") :body ("throw_statement" "co_return_statement" "co_yield_statement" "compound_statement" "case_statement" "do_statement" "for_statement" "return_statement" "switch_statement" "expression_statement" "if_statement" "continue_statement" "for_range_loop" "goto_statement" "try_statement" "attributed_statement" "break_statement" "labeled_statement" "while_statement") :declarator ("destructor_name" "reference_declarator" "attributed_declarator" "function_declarator" "parenthesized_declarator" "structured_binding_declarator" "array_declarator" "qualified_identifier" "identifier" "operator_name" "pointer_declarator" "template_function") :initializer ("init_statement") :right ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "initializer_list" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype"))) 
 ("for_statement" (:body ("throw_statement" "co_return_statement" "co_yield_statement" "compound_statement" "case_statement" "do_statement" "for_statement" "return_statement" "switch_statement" "expression_statement" "if_statement" "continue_statement" "for_range_loop" "goto_statement" "try_statement" "attributed_statement" "break_statement" "labeled_statement" "while_statement") :condition ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "comma_expression" "co_await_expression") :initializer ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "declaration" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "comma_expression" "co_await_expression") :update ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "comma_expression" "co_await_expression"))) 
 ("friend_declaration" (:*unnamed* ("declaration" "type_identifier" "function_definition" "template_type" "qualified_identifier"))) 
 ("function_declarator" (:*unnamed* ("virtual_specifier" "attribute_specifier" "throw_specifier" "type_qualifier" "noexcept" "attribute_declaration" "trailing_return_type" "requires_clause" "ref_qualifier") :declarator ("destructor_name" "reference_declarator" "type_identifier" "attributed_declarator" "field_identifier" "function_declarator" "parenthesized_declarator" "structured_binding_declarator" "array_declarator" "qualified_identifier" "identifier" "operator_name" "template_method" "pointer_declarator" "template_function") :parameters ("parameter_list"))) 
 ("function_definition" (:*unnamed* ("attribute_specifier" "default_method_clause" "type_qualifier" "ms_call_modifier" "ms_declspec_modifier" "attribute_declaration" "field_initializer_list" "try_statement" "virtual" "delete_method_clause" "storage_class_specifier" "explicit_function_specifier") :body ("try_statement" "compound_statement") :declarator ("destructor_name" "reference_declarator" "operator_cast" "attributed_declarator" "field_identifier" "function_declarator" "parenthesized_declarator" "structured_binding_declarator" "array_declarator" "qualified_identifier" "identifier" "operator_name" "template_method" "pointer_declarator" "template_function") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype"))) 
 ("goto_statement" (:label ("statement_identifier"))) 
 ("if_statement" (:alternative ("throw_statement" "co_return_statement" "co_yield_statement" "compound_statement" "case_statement" "do_statement" "for_statement" "return_statement" "switch_statement" "expression_statement" "if_statement" "continue_statement" "for_range_loop" "goto_statement" "try_statement" "attributed_statement" "break_statement" "labeled_statement" "while_statement") :condition ("condition_clause") :consequence ("throw_statement" "co_return_statement" "co_yield_statement" "compound_statement" "case_statement" "do_statement" "for_statement" "return_statement" "switch_statement" "expression_statement" "if_statement" "continue_statement" "for_range_loop" "goto_statement" "try_statement" "attributed_statement" "break_statement" "labeled_statement" "while_statement"))) 
 ("init_declarator" (:declarator ("destructor_name" "reference_declarator" "attributed_declarator" "function_declarator" "parenthesized_declarator" "structured_binding_declarator" "array_declarator" "qualified_identifier" "identifier" "operator_name" "pointer_declarator" "template_function") :value ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "argument_list" "requires_clause" "false" "pointer_expression" "call_expression" "initializer_list" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("init_statement" (:*unnamed* ("type_definition" "expression_statement" "alias_declaration" "declaration"))) 
 ("initializer_list" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "initializer_pair" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "initializer_list" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("initializer_pair" (:designator ("subscript_designator" "field_designator") :value ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "initializer_list" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("labeled_statement" (:*unnamed* ("throw_statement" "co_return_statement" "co_yield_statement" "compound_statement" "case_statement" "do_statement" "for_statement" "return_statement" "switch_statement" "expression_statement" "if_statement" "continue_statement" "for_range_loop" "goto_statement" "try_statement" "attributed_statement" "break_statement" "labeled_statement" "while_statement") :label ("statement_identifier"))) 
 ("lambda_capture_specifier" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "lambda_default_capture" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("lambda_expression" (:body ("compound_statement") :captures ("lambda_capture_specifier") :constraint ("requires_clause") :declarator ("abstract_function_declarator") :template_parameters ("template_parameter_list"))) 
 ("linkage_specification" (:body ("function_definition" "declaration_list" "declaration") :value ("string_literal"))) 
 ("ms_based_modifier" (:*unnamed* ("argument_list"))) 
 ("ms_declspec_modifier" (:*unnamed* ("identifier"))) 
 ("ms_pointer_modifier" (:*unnamed* ("ms_unaligned_ptr_modifier" "ms_signed_ptr_modifier" "ms_unsigned_ptr_modifier" "ms_restrict_modifier"))) 
 ("namespace_alias_definition" (:*unnamed* ("identifier" "qualified_identifier") :name ("identifier"))) 
 ("namespace_definition" (:body ("declaration_list") :name ("identifier" "namespace_definition_name"))) 
 ("namespace_definition_name" (:*unnamed* ("identifier" "namespace_definition_name"))) 
 ("new_declarator" (:*unnamed* ("new_declarator") :length ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("new_expression" (:arguments ("argument_list" "initializer_list") :declarator ("new_declarator") :placement ("argument_list") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype"))) 
 ("noexcept" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("operator_cast" (:*unnamed* ("attribute_specifier" "virtual" "type_qualifier" "storage_class_specifier" "ms_declspec_modifier" "attribute_declaration") :declarator ("abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_reference_declarator" "abstract_pointer_declarator") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype"))) 
 ("operator_name" (:*unnamed* ("identifier"))) 
 ("optional_parameter_declaration" (:*unnamed* ("attribute_specifier" "virtual" "type_qualifier" "storage_class_specifier" "ms_declspec_modifier" "attribute_declaration") :declarator ("destructor_name" "reference_declarator" "attributed_declarator" "function_declarator" "parenthesized_declarator" "structured_binding_declarator" "array_declarator" "qualified_identifier" "identifier" "operator_name" "pointer_declarator" "template_function") :default_value ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype"))) 
 ("optional_type_parameter_declaration" (:default_type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype") :name ("type_identifier"))) 
 ("parameter_declaration" (:*unnamed* ("attribute_specifier" "virtual" "type_qualifier" "storage_class_specifier" "ms_declspec_modifier" "attribute_declaration") :declarator ("destructor_name" "array_declarator" "qualified_identifier" "abstract_function_declarator" "identifier" "pointer_declarator" "abstract_array_declarator" "abstract_reference_declarator" "reference_declarator" "abstract_parenthesized_declarator" "attributed_declarator" "function_declarator" "parenthesized_declarator" "structured_binding_declarator" "operator_name" "abstract_pointer_declarator" "template_function") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype"))) 
 ("parameter_list" (:*unnamed* ("optional_parameter_declaration" "parameter_declaration" "variadic_parameter_declaration"))) 
 ("parameter_pack_expansion" (:pattern ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "type_descriptor" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("parenthesized_declarator" (:*unnamed* ("destructor_name" "reference_declarator" "type_identifier" "attributed_declarator" "field_identifier" "function_declarator" "parenthesized_declarator" "structured_binding_declarator" "array_declarator" "qualified_identifier" "identifier" "operator_name" "template_method" "pointer_declarator" "template_function"))) 
 ("parenthesized_expression" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "comma_expression" "co_await_expression" "preproc_defined"))) 
 ("placeholder_type_specifier" (:*unnamed* ("auto" "decltype") :constraint ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype"))) 
 ("pointer_declarator" (:*unnamed* ("ms_based_modifier" "ms_pointer_modifier" "type_qualifier") :declarator ("destructor_name" "reference_declarator" "type_identifier" "attributed_declarator" "field_identifier" "function_declarator" "parenthesized_declarator" "structured_binding_declarator" "array_declarator" "qualified_identifier" "identifier" "operator_name" "template_method" "pointer_declarator" "template_function"))) 
 ("pointer_expression" (:argument ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :operator nil)) 
 ("preproc_call" (:argument ("preproc_arg") :directive ("preproc_directive"))) 
 ("preproc_def" (:name ("identifier") :value ("preproc_arg"))) 
 ("preproc_defined" (:*unnamed* ("identifier"))) 
 ("preproc_elif" (:*unnamed* ("type_identifier" "enum_specifier" "sized_type_specifier" "co_yield_statement" "qualified_identifier" "compound_statement" "declaration" "template_instantiation" "preproc_ifdef" "case_statement" "preproc_call" "do_statement" "return_statement" "union_specifier" "expression_statement" "dependent_type" "goto_statement" "class_specifier" "try_statement" "break_statement" "labeled_statement" "while_statement" "namespace_alias_definition" "preproc_if" "primitive_type" "throw_statement" "struct_specifier" "co_return_statement" "template_type" "preproc_def" "preproc_include" "placeholder_type_specifier" "template_declaration" "static_assert_declaration" "concept_definition" "for_statement" "switch_statement" "if_statement" "linkage_specification" "continue_statement" "using_declaration" "for_range_loop" "preproc_function_def" "function_definition" "type_definition" "friend_declaration" "attributed_statement" "field_declaration" "namespace_definition" "alias_declaration" "access_specifier" "decltype") :alternative ("preproc_elif" "preproc_else") :condition ("unary_expression" "call_expression" "parenthesized_expression" "char_literal" "identifier" "binary_expression" "number_literal" "preproc_defined"))) 
 ("preproc_else" (:*unnamed* ("type_identifier" "enum_specifier" "sized_type_specifier" "co_yield_statement" "qualified_identifier" "compound_statement" "declaration" "template_instantiation" "preproc_ifdef" "case_statement" "preproc_call" "do_statement" "return_statement" "union_specifier" "expression_statement" "dependent_type" "goto_statement" "class_specifier" "try_statement" "break_statement" "labeled_statement" "while_statement" "namespace_alias_definition" "preproc_if" "primitive_type" "throw_statement" "struct_specifier" "co_return_statement" "template_type" "preproc_def" "preproc_include" "placeholder_type_specifier" "template_declaration" "static_assert_declaration" "concept_definition" "for_statement" "switch_statement" "if_statement" "linkage_specification" "continue_statement" "using_declaration" "for_range_loop" "preproc_function_def" "function_definition" "type_definition" "friend_declaration" "attributed_statement" "field_declaration" "namespace_definition" "alias_declaration" "access_specifier" "decltype"))) 
 ("preproc_function_def" (:name ("identifier") :parameters ("preproc_params") :value ("preproc_arg"))) 
 ("preproc_if" (:*unnamed* ("type_identifier" "enum_specifier" "sized_type_specifier" "co_yield_statement" "qualified_identifier" "compound_statement" "declaration" "template_instantiation" "preproc_ifdef" "case_statement" "preproc_call" "do_statement" "return_statement" "union_specifier" "expression_statement" "dependent_type" "goto_statement" "class_specifier" "try_statement" "break_statement" "labeled_statement" "while_statement" "namespace_alias_definition" "preproc_if" "primitive_type" "throw_statement" "struct_specifier" "co_return_statement" "template_type" "preproc_def" "preproc_include" "placeholder_type_specifier" "template_declaration" "static_assert_declaration" "concept_definition" "for_statement" "switch_statement" "if_statement" "linkage_specification" "continue_statement" "using_declaration" "for_range_loop" "preproc_function_def" "function_definition" "type_definition" "friend_declaration" "attributed_statement" "field_declaration" "namespace_definition" "alias_declaration" "access_specifier" "decltype") :alternative ("preproc_elif" "preproc_else") :condition ("unary_expression" "call_expression" "parenthesized_expression" "char_literal" "identifier" "binary_expression" "number_literal" "preproc_defined"))) 
 ("preproc_ifdef" (:*unnamed* ("type_identifier" "enum_specifier" "sized_type_specifier" "co_yield_statement" "qualified_identifier" "compound_statement" "declaration" "template_instantiation" "preproc_ifdef" "case_statement" "preproc_call" "do_statement" "return_statement" "union_specifier" "expression_statement" "dependent_type" "goto_statement" "class_specifier" "try_statement" "break_statement" "labeled_statement" "while_statement" "namespace_alias_definition" "preproc_if" "primitive_type" "throw_statement" "struct_specifier" "co_return_statement" "template_type" "preproc_def" "preproc_include" "placeholder_type_specifier" "template_declaration" "static_assert_declaration" "concept_definition" "for_statement" "switch_statement" "if_statement" "linkage_specification" "continue_statement" "using_declaration" "for_range_loop" "preproc_function_def" "function_definition" "type_definition" "friend_declaration" "attributed_statement" "field_declaration" "namespace_definition" "alias_declaration" "access_specifier" "decltype") :alternative ("preproc_elif" "preproc_else") :name ("identifier"))) 
 ("preproc_include" (:path ("string_literal" "identifier" "call_expression" "system_lib_string"))) 
 ("preproc_params" (:*unnamed* ("identifier"))) 
 ("qualified_identifier" (:name ("destructor_name" "operator_cast" "type_identifier" "dependent_name" "field_identifier" "template_type" "qualified_identifier" "identifier" "operator_name" "template_method" "template_function") :scope ("namespace_identifier" "dependent_name" "template_type" "decltype"))) 
 ("raw_string_literal" (:*unnamed* ("raw_string_delimiter" "raw_string_content") :delimiter ("raw_string_delimiter"))) 
 ("reference_declarator" (:*unnamed* ("destructor_name" "reference_declarator" "attributed_declarator" "field_identifier" "function_declarator" "parenthesized_declarator" "structured_binding_declarator" "array_declarator" "qualified_identifier" "identifier" "operator_name" "template_method" "pointer_declarator" "template_function" "variadic_declarator"))) 
 ("requirement_seq" (:*unnamed* ("type_requirement" "simple_requirement" "compound_requirement"))) 
 ("requires_clause" (:constraint ("assignment_expression" "concatenated_string" "type_identifier" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "template_type" "constraint_disjunction" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "constraint_conjunction" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("requires_expression" (:parameters ("parameter_list") :requirements ("requirement_seq"))) 
 ("return_statement" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "initializer_list" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "comma_expression" "co_await_expression"))) 
 ("simple_requirement" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "comma_expression" "co_await_expression"))) 
 ("sized_type_specifier" (:type ("primitive_type" "type_identifier"))) 
 ("sizeof_expression" (:type ("type_descriptor") :value ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("static_assert_declaration" (:condition ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :message ("concatenated_string" "string_literal" "raw_string_literal"))) 
 ("string_literal" (:*unnamed* ("escape_sequence"))) 
 ("struct_specifier" (:*unnamed* ("base_class_clause" "ms_declspec_modifier" "virtual_specifier" "attribute_declaration") :body ("field_declaration_list") :name ("template_type" "type_identifier" "qualified_identifier"))) 
 ("structured_binding_declarator" (:*unnamed* ("identifier"))) 
 ("subscript_designator" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("subscript_expression" (:argument ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :index ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "initializer_list" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("switch_statement" (:body ("compound_statement") :condition ("condition_clause"))) 
 ("template_argument_list" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "type_descriptor" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("template_declaration" (:*unnamed* ("primitive_type" "struct_specifier" "type_identifier" "enum_specifier" "template_type" "sized_type_specifier" "qualified_identifier" "declaration" "placeholder_type_specifier" "requires_clause" "template_declaration" "concept_definition" "union_specifier" "dependent_type" "function_definition" "class_specifier" "alias_declaration" "decltype") :parameters ("template_parameter_list"))) 
 ("template_function" (:arguments ("template_argument_list") :name ("identifier"))) 
 ("template_instantiation" (:*unnamed* ("attribute_specifier" "virtual" "type_qualifier" "storage_class_specifier" "ms_declspec_modifier" "attribute_declaration") :declarator ("destructor_name" "reference_declarator" "attributed_declarator" "function_declarator" "parenthesized_declarator" "structured_binding_declarator" "array_declarator" "qualified_identifier" "identifier" "operator_name" "pointer_declarator" "template_function") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype"))) 
 ("template_method" (:arguments ("template_argument_list") :name ("field_identifier"))) 
 ("template_parameter_list" (:*unnamed* ("optional_parameter_declaration" "template_template_parameter_declaration" "variadic_parameter_declaration" "parameter_declaration" "type_parameter_declaration" "optional_type_parameter_declaration" "variadic_type_parameter_declaration"))) 
 ("template_template_parameter_declaration" (:*unnamed* ("optional_type_parameter_declaration" "type_parameter_declaration" "variadic_type_parameter_declaration") :parameters ("template_parameter_list"))) 
 ("template_type" (:arguments ("template_argument_list") :name ("type_identifier"))) 
 ("throw_specifier" (:*unnamed* ("type_descriptor"))) 
 ("throw_statement" (:*unnamed* ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression"))) 
 ("trailing_return_type" (:*unnamed* ("type_descriptor"))) 
 ("translation_unit" (:*unnamed* ("type_identifier" "enum_specifier" "sized_type_specifier" "co_yield_statement" "qualified_identifier" "compound_statement" "declaration" "template_instantiation" "preproc_ifdef" "case_statement" "preproc_call" "do_statement" "return_statement" "union_specifier" "expression_statement" "dependent_type" "goto_statement" "class_specifier" "try_statement" "break_statement" "labeled_statement" "while_statement" "namespace_alias_definition" "preproc_if" "primitive_type" "throw_statement" "struct_specifier" "co_return_statement" "template_type" "preproc_def" "preproc_include" "placeholder_type_specifier" "template_declaration" "static_assert_declaration" "concept_definition" "for_statement" "switch_statement" "if_statement" "linkage_specification" "continue_statement" "using_declaration" "for_range_loop" "preproc_function_def" "function_definition" "type_definition" "attributed_statement" "namespace_definition" "alias_declaration" "decltype"))) 
 ("try_statement" (:*unnamed* ("catch_clause" "field_initializer_list") :body ("compound_statement"))) 
 ("type_definition" (:*unnamed* ("type_qualifier") :declarator ("type_identifier" "function_declarator" "attributed_declarator" "pointer_declarator" "parenthesized_declarator" "array_declarator") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype"))) 
 ("type_descriptor" (:*unnamed* ("type_qualifier") :declarator ("abstract_function_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_reference_declarator" "abstract_pointer_declarator") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype"))) 
 ("type_parameter_declaration" (:*unnamed* ("type_identifier"))) 
 ("type_requirement" (:*unnamed* ("template_type" "type_identifier" "qualified_identifier"))) 
 ("unary_expression" (:argument ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression" "preproc_defined") :operator nil)) 
 ("union_specifier" (:*unnamed* ("base_class_clause" "ms_declspec_modifier" "virtual_specifier" "attribute_declaration") :body ("field_declaration_list") :name ("template_type" "type_identifier" "qualified_identifier"))) 
 ("update_expression" (:argument ("assignment_expression" "concatenated_string" "compound_literal_expression" "parenthesized_expression" "fold_expression" "null" "nullptr" "qualified_identifier" "subscript_expression" "cast_expression" "raw_string_literal" "requires_expression" "user_defined_literal" "binary_expression" "number_literal" "new_expression" "unary_expression" "char_literal" "parameter_pack_expansion" "template_function" "delete_expression" "sizeof_expression" "update_expression" "identifier" "this" "requires_clause" "false" "pointer_expression" "call_expression" "string_literal" "conditional_expression" "field_expression" "true" "lambda_expression" "co_await_expression") :operator nil)) 
 ("user_defined_literal" (:*unnamed* ("concatenated_string" "number_literal" "raw_string_literal" "char_literal" "string_literal" "literal_suffix"))) 
 ("using_declaration" (:*unnamed* ("identifier" "qualified_identifier"))) 
 ("variadic_declarator" (:*unnamed* ("identifier"))) 
 ("variadic_parameter_declaration" (:*unnamed* ("attribute_specifier" "virtual" "type_qualifier" "storage_class_specifier" "ms_declspec_modifier" "attribute_declaration") :declarator ("reference_declarator" "variadic_declarator") :type ("primitive_type" "struct_specifier" "union_specifier" "type_identifier" "enum_specifier" "dependent_type" "template_type" "sized_type_specifier" "class_specifier" "qualified_identifier" "placeholder_type_specifier" "decltype"))) 
 ("variadic_type_parameter_declaration" (:*unnamed* ("type_identifier"))) 
 ("while_statement" (:body ("throw_statement" "co_return_statement" "co_yield_statement" "compound_statement" "case_statement" "do_statement" "for_statement" "return_statement" "switch_statement" "expression_statement" "if_statement" "continue_statement" "for_range_loop" "goto_statement" "try_statement" "attributed_statement" "break_statement" "labeled_statement" "while_statement") :condition ("condition_clause"))) 
))

(defconst combobulate-rules-cpp-inverted 
 '(("abstract_function_declarator" ("operator_cast" "abstract_reference_declarator" "parameter_declaration" "abstract_parenthesized_declarator" "_abstract_declarator" "abstract_function_declarator" "lambda_expression" "abstract_array_declarator" "abstract_pointer_declarator" "type_descriptor"))
   ("abstract_array_declarator" ("operator_cast" "abstract_reference_declarator" "parameter_declaration" "abstract_parenthesized_declarator" "_abstract_declarator" "abstract_function_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "type_descriptor"))
   ("abstract_parenthesized_declarator" ("operator_cast" "abstract_reference_declarator" "parameter_declaration" "abstract_parenthesized_declarator" "_abstract_declarator" "abstract_function_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "type_descriptor"))
   ("abstract_reference_declarator" ("operator_cast" "abstract_reference_declarator" "parameter_declaration" "abstract_parenthesized_declarator" "_abstract_declarator" "abstract_function_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "type_descriptor"))
   ("abstract_pointer_declarator" ("operator_cast" "abstract_reference_declarator" "parameter_declaration" "abstract_parenthesized_declarator" "_abstract_declarator" "abstract_function_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "type_descriptor"))
   ("destructor_name" ("reference_declarator" "parameter_declaration" "for_range_loop" "attributed_declarator" "_declarator" "function_definition" "function_declarator" "parenthesized_declarator" "declaration" "array_declarator" "field_expression" "optional_parameter_declaration" "qualified_identifier" "template_instantiation" "pointer_declarator" "init_declarator"))
   ("reference_declarator" ("reference_declarator" "parameter_declaration" "for_range_loop" "_field_declarator" "attributed_declarator" "_declarator" "function_declarator" "function_definition" "parenthesized_declarator" "declaration" "array_declarator" "optional_parameter_declaration" "field_declaration" "template_instantiation" "variadic_parameter_declaration" "pointer_declarator" "init_declarator"))
   ("attributed_declarator" ("reference_declarator" "parameter_declaration" "for_range_loop" "_field_declarator" "attributed_declarator" "_declarator" "function_declarator" "function_definition" "parenthesized_declarator" "type_definition" "array_declarator" "declaration" "optional_parameter_declaration" "field_declaration" "template_instantiation" "pointer_declarator" "init_declarator" "_type_declarator"))
   ("function_declarator" ("reference_declarator" "parameter_declaration" "for_range_loop" "_field_declarator" "attributed_declarator" "_declarator" "function_declarator" "function_definition" "parenthesized_declarator" "type_definition" "array_declarator" "declaration" "optional_parameter_declaration" "field_declaration" "template_instantiation" "pointer_declarator" "init_declarator" "_type_declarator"))
   ("parenthesized_declarator" ("reference_declarator" "parameter_declaration" "for_range_loop" "_field_declarator" "attributed_declarator" "_declarator" "function_declarator" "function_definition" "parenthesized_declarator" "type_definition" "array_declarator" "declaration" "optional_parameter_declaration" "field_declaration" "template_instantiation" "pointer_declarator" "init_declarator" "_type_declarator"))
   ("structured_binding_declarator" ("reference_declarator" "parameter_declaration" "for_range_loop" "attributed_declarator" "_declarator" "function_definition" "function_declarator" "parenthesized_declarator" "declaration" "array_declarator" "optional_parameter_declaration" "template_instantiation" "pointer_declarator" "init_declarator"))
   ("array_declarator" ("reference_declarator" "parameter_declaration" "for_range_loop" "_field_declarator" "attributed_declarator" "_declarator" "function_declarator" "function_definition" "parenthesized_declarator" "type_definition" "array_declarator" "declaration" "optional_parameter_declaration" "field_declaration" "template_instantiation" "pointer_declarator" "init_declarator" "_type_declarator"))
   ("qualified_identifier" ("co_yield_statement" "enumerator" "qualified_identifier" "preproc_ifdef" "case_statement" "expression_statement" "class_specifier" "field_initializer" "condition_clause" "namespace_alias_definition" "co_return_statement" "update_expression" "argument_list" "placeholder_type_specifier" "template_declaration" "parameter_declaration" "for_range_loop" "attributed_declarator" "type_definition" "constraint_conjunction" "function_declarator" "_type_specifier" "pointer_declarator" "init_declarator" "enum_specifier" "parenthesized_expression" "fold_expression" "declaration" "subscript_designator" "subscript_expression" "template_instantiation" "lambda_capture_specifier" "binary_expression" "abstract_array_declarator" "new_declarator" "reference_declarator" "noexcept" "template_argument_list" "delete_expression" "constraint_disjunction" "array_declarator" "base_class_clause" "variadic_parameter_declaration" "preproc_elif" "for_statement" "_expression" "call_expression" "initializer_list" "field_expression" "field_declaration" "comma_expression" "decltype" "preproc_else" "cast_expression" "compound_requirement" "explicit_function_specifier" "bitfield_clause" "return_statement" "new_expression" "unary_expression" "translation_unit" "dependent_type" "preproc_if" "_declarator" "static_assert_declaration" "concept_definition" "assignment_expression" "declaration_list" "simple_requirement" "compound_literal_expression" "compound_statement" "type_descriptor" "union_specifier" "type_requirement" "optional_type_parameter_declaration" "parenthesized_declarator" "initializer_pair" "parameter_pack_expansion" "struct_specifier" "throw_statement" "operator_cast" "sizeof_expression" "optional_parameter_declaration" "requires_clause" "using_declaration" "pointer_expression" "function_definition" "friend_declaration" "conditional_expression" "co_await_expression"))
   ("identifier" ("ms_declspec_modifier" "co_yield_statement" "enumerator" "qualified_identifier" "preproc_ifdef" "case_statement" "expression_statement" "attribute" "condition_clause" "namespace_alias_definition" "co_return_statement" "preproc_def" "preproc_include" "update_expression" "argument_list" "parameter_declaration" "for_range_loop" "attributed_declarator" "constraint_conjunction" "function_declarator" "pointer_declarator" "init_declarator" "variadic_declarator" "parenthesized_expression" "fold_expression" "declaration" "subscript_designator" "subscript_expression" "template_instantiation" "lambda_capture_specifier" "binary_expression" "abstract_array_declarator" "new_declarator" "reference_declarator" "noexcept" "template_argument_list" "destructor_name" "delete_expression" "constraint_disjunction" "array_declarator" "preproc_elif" "for_statement" "_expression" "call_expression" "initializer_list" "field_expression" "field_declaration" "namespace_definition" "comma_expression" "decltype" "cast_expression" "compound_requirement" "explicit_function_specifier" "bitfield_clause" "return_statement" "unary_expression" "preproc_if" "_declarator" "static_assert_declaration" "concept_definition" "preproc_defined" "assignment_expression" "simple_requirement" "preproc_params" "namespace_definition_name" "parenthesized_declarator" "structured_binding_declarator" "initializer_pair" "parameter_pack_expansion" "template_function" "throw_statement" "sizeof_expression" "optional_parameter_declaration" "requires_clause" "using_declaration" "pointer_expression" "preproc_function_def" "function_definition" "conditional_expression" "operator_name" "co_await_expression"))
   ("operator_name" ("reference_declarator" "parameter_declaration" "for_range_loop" "_field_declarator" "attributed_declarator" "_declarator" "function_declarator" "function_definition" "parenthesized_declarator" "declaration" "array_declarator" "optional_parameter_declaration" "field_declaration" "qualified_identifier" "template_instantiation" "pointer_declarator" "init_declarator"))
   ("pointer_declarator" ("reference_declarator" "parameter_declaration" "for_range_loop" "_field_declarator" "attributed_declarator" "_declarator" "function_declarator" "function_definition" "parenthesized_declarator" "type_definition" "array_declarator" "declaration" "optional_parameter_declaration" "field_declaration" "template_instantiation" "pointer_declarator" "init_declarator" "_type_declarator"))
   ("template_function" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "qualified_identifier" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "template_instantiation" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "reference_declarator" "expression_statement" "return_statement" "unary_expression" "noexcept" "init_declarator" "parenthesized_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "_declarator" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "parameter_declaration" "call_expression" "attributed_declarator" "for_range_loop" "dependent_name" "constraint_conjunction" "function_declarator" "function_definition" "conditional_expression" "initializer_list" "field_expression" "field_declaration" "comma_expression" "pointer_declarator" "co_await_expression" "decltype"))
   ("assignment_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("concatenated_string" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "user_defined_literal" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("compound_literal_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("parenthesized_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "do_statement" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "preproc_if" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "preproc_elif" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("fold_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("null" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("nullptr" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("subscript_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("cast_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("raw_string_literal" ("assignment_expression" "concatenated_string" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "user_defined_literal" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("requires_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("user_defined_literal" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("binary_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "preproc_if" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "preproc_elif" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("number_literal" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "user_defined_literal" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "preproc_if" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "preproc_elif" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("new_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("unary_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "preproc_if" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "preproc_elif" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("char_literal" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "user_defined_literal" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "preproc_if" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "preproc_elif" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("parameter_pack_expansion" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("delete_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("sizeof_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("update_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("this" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("requires_clause" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "abstract_function_declarator" "update_expression" "argument_list" "requires_clause" "template_declaration" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "function_declarator" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "lambda_expression" "comma_expression" "co_await_expression" "decltype"))
   ("false" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("pointer_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("call_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "preproc_if" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "preproc_include" "preproc_elif" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("string_literal" ("assignment_expression" "concatenated_string" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "user_defined_literal" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "preproc_include" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "linkage_specification" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("conditional_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("field_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("true" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("lambda_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("co_await_expression" ("assignment_expression" "simple_requirement" "parenthesized_expression" "fold_expression" "co_yield_statement" "declaration" "enumerator" "subscript_designator" "subscript_expression" "cast_expression" "compound_requirement" "case_statement" "explicit_function_specifier" "binary_expression" "abstract_array_declarator" "lambda_capture_specifier" "new_declarator" "bitfield_clause" "return_statement" "expression_statement" "unary_expression" "noexcept" "init_declarator" "template_argument_list" "initializer_pair" "parameter_pack_expansion" "condition_clause" "throw_statement" "delete_expression" "sizeof_expression" "co_return_statement" "constraint_disjunction" "array_declarator" "optional_parameter_declaration" "update_expression" "argument_list" "requires_clause" "static_assert_declaration" "concept_definition" "for_statement" "_expression" "pointer_expression" "call_expression" "for_range_loop" "constraint_conjunction" "initializer_list" "conditional_expression" "field_expression" "field_declaration" "comma_expression" "co_await_expression" "decltype"))
   ("field_identifier" ("reference_declarator" "attributed_declarator" "_field_declarator" "function_definition" "function_declarator" "parenthesized_declarator" "array_declarator" "field_expression" "qualified_identifier" "field_declaration" "field_initializer" "template_method" "pointer_declarator" "field_designator"))
   ("template_method" ("reference_declarator" "attributed_declarator" "_field_declarator" "dependent_name" "function_declarator" "function_definition" "parenthesized_declarator" "array_declarator" "field_expression" "qualified_identifier" "field_declaration" "field_initializer" "pointer_declarator"))
   ("throw_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("co_return_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("co_yield_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("compound_statement" ("declaration_list" "preproc_else" "compound_statement" "preproc_ifdef" "case_statement" "_statement" "do_statement" "translation_unit" "try_statement" "labeled_statement" "while_statement" "preproc_if" "preproc_elif" "for_statement" "catch_clause" "switch_statement" "if_statement" "for_range_loop" "function_definition" "attributed_statement" "lambda_expression"))
   ("case_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "preproc_ifdef" "_statement" "while_statement" "do_statement" "for_statement"))
   ("do_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("for_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("return_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("switch_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("expression_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "init_statement" "preproc_elif" "preproc_if" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("if_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("continue_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("for_range_loop" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("goto_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("try_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "function_definition" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("attributed_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("break_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("labeled_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("while_statement" ("if_statement" "declaration_list" "for_range_loop" "preproc_else" "translation_unit" "compound_statement" "attributed_statement" "preproc_if" "preproc_elif" "labeled_statement" "case_statement" "_statement" "preproc_ifdef" "while_statement" "do_statement" "for_statement"))
   ("type_identifier" ("declaration_list" "compound_literal_expression" "enum_specifier" "preproc_else" "sized_type_specifier" "compound_statement" "declaration" "qualified_identifier" "template_instantiation" "preproc_ifdef" "type_descriptor" "_type_declarator" "union_specifier" "new_expression" "type_requirement" "translation_unit" "dependent_type" "type_parameter_declaration" "optional_type_parameter_declaration" "parenthesized_declarator" "class_specifier" "preproc_if" "variadic_type_parameter_declaration" "struct_specifier" "operator_cast" "template_type" "constraint_disjunction" "array_declarator" "base_class_clause" "optional_parameter_declaration" "preproc_elif" "variadic_parameter_declaration" "placeholder_type_specifier" "requires_clause" "template_declaration" "parameter_declaration" "for_range_loop" "attributed_declarator" "function_definition" "type_definition" "constraint_conjunction" "friend_declaration" "function_declarator" "field_declaration" "_type_specifier" "alias_declaration" "pointer_declarator"))
   ("primitive_type" ("declaration_list" "preproc_else" "sized_type_specifier" "declaration" "compound_statement" "template_instantiation" "preproc_ifdef" "type_descriptor" "new_expression" "translation_unit" "dependent_type" "optional_type_parameter_declaration" "preproc_if" "operator_cast" "optional_parameter_declaration" "variadic_parameter_declaration" "preproc_elif" "placeholder_type_specifier" "template_declaration" "parameter_declaration" "call_expression" "for_range_loop" "function_definition" "type_definition" "field_declaration" "_type_specifier"))
   ("struct_specifier" ("declaration_list" "preproc_else" "declaration" "compound_statement" "template_instantiation" "preproc_ifdef" "type_descriptor" "new_expression" "translation_unit" "dependent_type" "optional_type_parameter_declaration" "preproc_if" "operator_cast" "optional_parameter_declaration" "variadic_parameter_declaration" "preproc_elif" "placeholder_type_specifier" "template_declaration" "parameter_declaration" "for_range_loop" "function_definition" "type_definition" "field_declaration" "_type_specifier"))
   ("union_specifier" ("declaration_list" "preproc_else" "declaration" "compound_statement" "template_instantiation" "preproc_ifdef" "type_descriptor" "new_expression" "translation_unit" "dependent_type" "optional_type_parameter_declaration" "preproc_if" "operator_cast" "optional_parameter_declaration" "variadic_parameter_declaration" "preproc_elif" "placeholder_type_specifier" "template_declaration" "parameter_declaration" "for_range_loop" "function_definition" "type_definition" "field_declaration" "_type_specifier"))
   ("enum_specifier" ("declaration_list" "preproc_else" "declaration" "compound_statement" "template_instantiation" "preproc_ifdef" "type_descriptor" "new_expression" "translation_unit" "dependent_type" "optional_type_parameter_declaration" "preproc_if" "operator_cast" "optional_parameter_declaration" "variadic_parameter_declaration" "preproc_elif" "placeholder_type_specifier" "template_declaration" "parameter_declaration" "for_range_loop" "function_definition" "type_definition" "field_declaration" "_type_specifier"))
   ("dependent_type" ("declaration_list" "preproc_else" "declaration" "compound_statement" "template_instantiation" "preproc_ifdef" "type_descriptor" "new_expression" "translation_unit" "dependent_type" "optional_type_parameter_declaration" "preproc_if" "operator_cast" "optional_parameter_declaration" "variadic_parameter_declaration" "preproc_elif" "placeholder_type_specifier" "template_declaration" "parameter_declaration" "for_range_loop" "function_definition" "type_definition" "field_declaration" "_type_specifier"))
   ("template_type" ("declaration_list" "compound_literal_expression" "enum_specifier" "preproc_else" "compound_statement" "declaration" "qualified_identifier" "template_instantiation" "preproc_ifdef" "type_descriptor" "union_specifier" "new_expression" "type_requirement" "translation_unit" "dependent_type" "optional_type_parameter_declaration" "class_specifier" "preproc_if" "struct_specifier" "operator_cast" "constraint_disjunction" "base_class_clause" "optional_parameter_declaration" "preproc_elif" "variadic_parameter_declaration" "placeholder_type_specifier" "requires_clause" "template_declaration" "parameter_declaration" "for_range_loop" "function_definition" "dependent_name" "constraint_conjunction" "friend_declaration" "type_definition" "field_declaration" "_type_specifier"))
   ("sized_type_specifier" ("declaration_list" "enum_specifier" "preproc_else" "declaration" "compound_statement" "template_instantiation" "preproc_ifdef" "type_descriptor" "new_expression" "translation_unit" "dependent_type" "optional_type_parameter_declaration" "preproc_if" "operator_cast" "optional_parameter_declaration" "variadic_parameter_declaration" "preproc_elif" "placeholder_type_specifier" "template_declaration" "parameter_declaration" "for_range_loop" "function_definition" "type_definition" "field_declaration" "_type_specifier"))
   ("class_specifier" ("declaration_list" "preproc_else" "declaration" "compound_statement" "template_instantiation" "preproc_ifdef" "type_descriptor" "new_expression" "translation_unit" "dependent_type" "optional_type_parameter_declaration" "preproc_if" "operator_cast" "optional_parameter_declaration" "variadic_parameter_declaration" "preproc_elif" "placeholder_type_specifier" "template_declaration" "parameter_declaration" "for_range_loop" "function_definition" "type_definition" "field_declaration" "_type_specifier"))
   ("placeholder_type_specifier" ("declaration_list" "preproc_else" "declaration" "compound_statement" "template_instantiation" "preproc_ifdef" "type_descriptor" "new_expression" "translation_unit" "dependent_type" "optional_type_parameter_declaration" "preproc_if" "operator_cast" "optional_parameter_declaration" "variadic_parameter_declaration" "preproc_elif" "placeholder_type_specifier" "template_declaration" "parameter_declaration" "for_range_loop" "function_definition" "type_definition" "field_declaration" "_type_specifier"))
   ("decltype" ("declaration_list" "preproc_else" "declaration" "compound_statement" "qualified_identifier" "template_instantiation" "preproc_ifdef" "type_descriptor" "new_expression" "translation_unit" "dependent_type" "optional_type_parameter_declaration" "preproc_if" "operator_cast" "optional_parameter_declaration" "variadic_parameter_declaration" "preproc_elif" "placeholder_type_specifier" "template_declaration" "parameter_declaration" "for_range_loop" "function_definition" "type_definition" "field_declaration" "_type_specifier"))
   ("type_qualifier" ("operator_cast" "parameter_declaration" "for_range_loop" "function_definition" "type_definition" "function_declarator" "declaration" "array_declarator" "abstract_function_declarator" "field_declaration" "optional_parameter_declaration" "template_instantiation" "variadic_parameter_declaration" "pointer_declarator" "abstract_array_declarator" "abstract_pointer_declarator" "type_descriptor"))
   ("virtual_specifier" ("struct_specifier" "union_specifier" "function_declarator" "class_specifier" "abstract_function_declarator"))
   ("attribute_specifier" ("operator_cast" "parameter_declaration" "for_range_loop" "function_definition" "function_declarator" "declaration" "optional_parameter_declaration" "abstract_function_declarator" "field_declaration" "template_instantiation" "variadic_parameter_declaration"))
   ("throw_specifier" ("abstract_function_declarator" "function_declarator"))
   ("noexcept" ("abstract_function_declarator" "function_declarator"))
   ("attribute_declaration" ("struct_specifier" "union_specifier" "operator_cast" "parameter_declaration" "for_range_loop" "attributed_declarator" "function_definition" "function_declarator" "class_specifier" "declaration" "attributed_statement" "abstract_function_declarator" "base_class_clause" "field_declaration" "optional_parameter_declaration" "alias_declaration" "template_instantiation" "variadic_parameter_declaration"))
   ("trailing_return_type" ("abstract_function_declarator" "function_declarator" "compound_requirement"))
   ("ref_qualifier" ("abstract_function_declarator" "function_declarator"))
   ("parameter_list" ("abstract_function_declarator" "function_declarator" "requires_expression" "catch_clause"))
   ("type_descriptor" ("throw_specifier" "sizeof_expression" "compound_literal_expression" "template_argument_list" "trailing_return_type" "cast_expression" "alias_declaration" "parameter_pack_expansion"))
   ("initializer_list" ("return_statement" "new_expression" "compound_literal_expression" "for_range_loop" "initializer_list" "declaration" "initializer_pair" "subscript_expression" "field_declaration" "field_initializer" "argument_list" "init_declarator"))
   ("preproc_defined" ("unary_expression" "parenthesized_expression" "preproc_elif" "argument_list" "binary_expression" "preproc_if"))
   ("argument_list" ("ms_based_modifier" "attribute_specifier" "new_expression" "attribute" "call_expression" "field_initializer" "init_declarator"))
   ("attribute" ("attribute_declaration"))
   ("virtual" ("operator_cast" "parameter_declaration" "for_range_loop" "function_definition" "declaration" "base_class_clause" "optional_parameter_declaration" "field_declaration" "template_instantiation" "variadic_parameter_declaration"))
   ("access_specifier" ("field_declaration_list" "preproc_else" "base_class_clause" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("declaration" ("field_declaration_list" "declaration_list" "linkage_specification" "preproc_else" "translation_unit" "friend_declaration" "for_statement" "compound_statement" "init_statement" "preproc_if" "preproc_elif" "preproc_ifdef" "case_statement" "template_declaration" "condition_clause"))
   ("type_definition" ("field_declaration_list" "declaration_list" "preproc_else" "translation_unit" "init_statement" "compound_statement" "preproc_elif" "preproc_ifdef" "case_statement" "preproc_if"))
   ("escape_sequence" ("char_literal" "string_literal"))
   ("base_class_clause" ("struct_specifier" "union_specifier" "class_specifier"))
   ("ms_declspec_modifier" ("struct_specifier" "union_specifier" "operator_cast" "parameter_declaration" "for_range_loop" "function_definition" "class_specifier" "declaration" "optional_parameter_declaration" "variadic_parameter_declaration" "field_declaration" "template_instantiation"))
   ("field_declaration_list" ("struct_specifier" "union_specifier" "class_specifier"))
   ("comma_expression" ("return_statement" "expression_statement" "simple_requirement" "condition_clause" "parenthesized_expression" "comma_expression" "for_statement"))
   ("template_instantiation" ("declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_ifdef" ("field_declaration_list" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_call" ("field_declaration_list" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("namespace_alias_definition" ("declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_if" ("field_declaration_list" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_def" ("field_declaration_list" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_include" ("declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("template_declaration" ("field_declaration_list" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "template_declaration" "preproc_if"))
   ("static_assert_declaration" ("field_declaration_list" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("concept_definition" ("declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "template_declaration" "preproc_if"))
   ("linkage_specification" ("declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("using_declaration" ("field_declaration_list" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_function_def" ("field_declaration_list" "declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("function_definition" ("field_declaration_list" "declaration_list" "linkage_specification" "preproc_else" "translation_unit" "friend_declaration" "compound_statement" "preproc_elif" "preproc_ifdef" "template_declaration" "preproc_if"))
   ("namespace_definition" ("declaration_list" "preproc_else" "translation_unit" "compound_statement" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("alias_declaration" ("field_declaration_list" "declaration_list" "preproc_else" "translation_unit" "init_statement" "compound_statement" "preproc_elif" "preproc_ifdef" "template_declaration" "preproc_if"))
   ("init_statement" ("for_range_loop" "condition_clause"))
   ("constraint_disjunction" ("constraint_disjunction" "constraint_conjunction" "requires_clause"))
   ("constraint_conjunction" ("constraint_disjunction" "constraint_conjunction" "requires_clause"))
   ("storage_class_specifier" ("operator_cast" "parameter_declaration" "for_range_loop" "function_definition" "declaration" "optional_parameter_declaration" "variadic_parameter_declaration" "field_declaration" "template_instantiation"))
   ("explicit_function_specifier" ("function_definition" "declaration"))
   ("operator_cast" ("function_definition" "qualified_identifier" "declaration"))
   ("init_declarator" ("declaration"))
   ("auto" ("placeholder_type_specifier" "decltype"))
   ("enumerator_list" ("enum_specifier"))
   ("enumerator" ("enumerator_list"))
   ("bitfield_clause" ("field_declaration"))
   ("friend_declaration" ("field_declaration_list" "preproc_else" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("field_declaration" ("field_declaration_list" "preproc_else" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("dependent_name" ("qualified_identifier" "field_expression"))
   ("field_initializer" ("field_initializer_list"))
   ("default_method_clause" ("function_definition"))
   ("ms_call_modifier" ("function_definition"))
   ("field_initializer_list" ("function_definition" "try_statement"))
   ("delete_method_clause" ("function_definition"))
   ("statement_identifier" ("goto_statement" "labeled_statement"))
   ("condition_clause" ("switch_statement" "if_statement" "while_statement"))
   ("initializer_pair" ("initializer_list"))
   ("subscript_designator" ("initializer_pair"))
   ("field_designator" ("initializer_pair"))
   ("lambda_default_capture" ("lambda_capture_specifier"))
   ("lambda_capture_specifier" ("lambda_expression"))
   ("template_parameter_list" ("template_template_parameter_declaration" "template_declaration" "lambda_expression"))
   ("declaration_list" ("namespace_definition" "linkage_specification"))
   ("ms_unaligned_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_signed_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_unsigned_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_restrict_modifier" ("ms_pointer_modifier"))
   ("namespace_definition_name" ("namespace_definition" "namespace_definition_name"))
   ("new_declarator" ("new_expression" "new_declarator"))
   ("optional_parameter_declaration" ("template_parameter_list" "parameter_list"))
   ("parameter_declaration" ("template_parameter_list" "parameter_list"))
   ("variadic_parameter_declaration" ("template_parameter_list" "parameter_list"))
   ("ms_based_modifier" ("pointer_declarator"))
   ("ms_pointer_modifier" ("pointer_declarator"))
   ("preproc_arg" ("preproc_def" "preproc_call" "preproc_function_def"))
   ("preproc_directive" ("preproc_call"))
   ("preproc_elif" ("preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_else" ("preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_params" ("preproc_function_def"))
   ("system_lib_string" ("preproc_include"))
   ("namespace_identifier" ("qualified_identifier"))
   ("raw_string_delimiter" ("raw_string_literal"))
   ("raw_string_content" ("raw_string_literal"))
   ("variadic_declarator" ("reference_declarator" "variadic_parameter_declaration"))
   ("type_requirement" ("requirement_seq"))
   ("simple_requirement" ("requirement_seq"))
   ("compound_requirement" ("requirement_seq"))
   ("requirement_seq" ("requires_expression"))
   ("template_argument_list" ("template_type" "template_function" "template_method"))
   ("template_template_parameter_declaration" ("template_parameter_list"))
   ("type_parameter_declaration" ("template_template_parameter_declaration" "template_parameter_list"))
   ("optional_type_parameter_declaration" ("template_template_parameter_declaration" "template_parameter_list"))
   ("variadic_type_parameter_declaration" ("template_template_parameter_declaration" "template_parameter_list"))
   ("catch_clause" ("try_statement"))
   ("literal_suffix" ("user_defined_literal"))
  ) 
)
;; END production rules for cpp





;; START Auto-generated production rules for `html'
(defconst combobulate-rules-html 
 '(("attribute" (:*unnamed* ("attribute_value" "quoted_attribute_value" "attribute_name"))) 
 ("element" (:*unnamed* ("start_tag" "end_tag" "doctype" "style_element" "text" "element" "script_element" "self_closing_tag" "erroneous_end_tag"))) 
 ("end_tag" (:*unnamed* ("tag_name"))) 
 ("erroneous_end_tag" (:*unnamed* ("erroneous_end_tag_name"))) 
 ("fragment" (:*unnamed* ("element" "script_element" "doctype" "style_element" "text" "erroneous_end_tag"))) 
 ("quoted_attribute_value" (:*unnamed* ("attribute_value"))) 
 ("script_element" (:*unnamed* ("raw_text" "start_tag" "end_tag"))) 
 ("self_closing_tag" (:*unnamed* ("attribute" "tag_name"))) 
 ("start_tag" (:*unnamed* ("attribute" "tag_name"))) 
 ("style_element" (:*unnamed* ("raw_text" "start_tag" "end_tag"))) 
))

(defconst combobulate-rules-html-inverted 
 '(("attribute_value" ("attribute" "quoted_attribute_value"))
   ("quoted_attribute_value" ("attribute"))
   ("attribute_name" ("attribute"))
   ("start_tag" ("element" "style_element" "script_element"))
   ("end_tag" ("element" "style_element" "script_element"))
   ("doctype" ("element" "fragment"))
   ("style_element" ("element" "fragment"))
   ("text" ("element" "fragment"))
   ("element" ("element" "fragment"))
   ("script_element" ("element" "fragment"))
   ("self_closing_tag" ("element"))
   ("erroneous_end_tag" ("element" "fragment"))
   ("tag_name" ("start_tag" "self_closing_tag" "end_tag"))
   ("erroneous_end_tag_name" ("erroneous_end_tag"))
   ("raw_text" ("style_element" "script_element"))
   ("attribute" ("start_tag" "self_closing_tag"))
  ) 
)
;; END production rules for html





;; START Auto-generated production rules for `toml'
(defconst combobulate-rules-toml 
 '(("array" (:*unnamed* ("offset_date_time" "inline_table" "string" "integer" "local_date" "local_date_time" "boolean" "float" "local_time" "array"))) 
 ("document" (:*unnamed* ("pair" "table_array_element" "table"))) 
 ("dotted_key" (:*unnamed* ("bare_key" "quoted_key" "dotted_key"))) 
 ("inline_table" (:*unnamed* ("pair"))) 
 ("pair" (:*unnamed* ("bare_key" "dotted_key" "offset_date_time" "inline_table" "string" "integer" "local_date" "quoted_key" "local_date_time" "boolean" "float" "local_time" "array"))) 
 ("quoted_key" (:*unnamed* ("escape_sequence"))) 
 ("string" (:*unnamed* ("escape_sequence"))) 
 ("table" (:*unnamed* ("pair" "bare_key" "quoted_key" "dotted_key"))) 
 ("table_array_element" (:*unnamed* ("pair" "bare_key" "quoted_key" "dotted_key"))) 
))

(defconst combobulate-rules-toml-inverted 
 '(("offset_date_time" ("pair" "array"))
   ("inline_table" ("pair" "array"))
   ("string" ("pair" "array"))
   ("integer" ("pair" "array"))
   ("local_date" ("pair" "array"))
   ("local_date_time" ("pair" "array"))
   ("boolean" ("pair" "array"))
   ("float" ("pair" "array"))
   ("local_time" ("pair" "array"))
   ("array" ("pair" "array"))
   ("pair" ("table_array_element" "inline_table" "document" "table"))
   ("table_array_element" ("document"))
   ("table" ("document"))
   ("bare_key" ("pair" "table_array_element" "table" "dotted_key"))
   ("quoted_key" ("pair" "table_array_element" "table" "dotted_key"))
   ("dotted_key" ("pair" "table_array_element" "table" "dotted_key"))
   ("escape_sequence" ("quoted_key" "string"))
  ) 
)
;; END production rules for toml





;; START Auto-generated production rules for `json'
(defconst combobulate-rules-json 
 '(("_value" (:*unnamed* ("true" "number" "false" "string" "object" "null" "array"))) 
 ("array" (:*unnamed* ("true" "number" "false" "string" "object" "null" "array"))) 
 ("document" (:*unnamed* ("true" "number" "false" "string" "object" "null" "array"))) 
 ("object" (:*unnamed* ("pair"))) 
 ("pair" (:key ("number" "string") :value ("true" "number" "false" "string" "object" "null" "array"))) 
 ("string" (:*unnamed* ("string_content"))) 
 ("string_content" (:*unnamed* ("escape_sequence"))) 
))

(defconst combobulate-rules-json-inverted 
 '(("true" ("pair" "_value" "document" "array"))
   ("number" ("pair" "_value" "document" "array"))
   ("false" ("pair" "_value" "document" "array"))
   ("string" ("pair" "_value" "document" "array"))
   ("object" ("pair" "_value" "document" "array"))
   ("null" ("pair" "_value" "document" "array"))
   ("array" ("pair" "_value" "document" "array"))
   ("pair" ("object"))
   ("string_content" ("string"))
   ("escape_sequence" ("string_content"))
  ) 
)
;; END production rules for json





(provide 'combobulate-rules)
